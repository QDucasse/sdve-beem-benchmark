byte turn[7] =  {0, 0, 0, 0, 0, 0};
byte b[7] =  {0, 0, 0, 0, 0, 0};
byte c[7] =  {0, 0, 0, 0, 0, 0};
state {p1(0), p2(1), p3(2), p4(3), p5(4), p6(5), p7(6), p8(7), p9(8), elected(9)} P_0.state = 0;
byte P_0.curr = 0;
state {p1(0), p2(1), p3(2), p4(3), p5(4), p6(5), p7(6), p8(7), p9(8), elected(9)} P_1.state = 0;
byte P_1.curr = 0;
state {p1(0), p2(1), p3(2), p4(3), p5(4), p6(5), p7(6), p8(7), p9(8), elected(9)} P_2.state = 0;
byte P_2.curr = 0;
state {p1(0), p2(1), p3(2), p4(3), p5(4), p6(5), p7(6), p8(7), p9(8), elected(9)} P_3.state = 0;
byte P_3.curr = 0;
state {p1(0), p2(1), p3(2), p4(3), p5(4), p6(5), p7(6), p8(7), p9(8), elected(9)} P_4.state = 0;
byte P_4.curr = 0;
state {q1(0)} LTL_property.state = 0;

  process P_0
    guardBlock
      temp bool t_0 = P_0.state == 0;
    guardCondition t_0;
    effect
      P_0.state = 1,
      turn[P_0.curr] = 0;

  process P_0
    guardBlock
      temp bool t_1 = P_0.state == 1,
      temp byte t_2 = b[P_0.curr],
      temp bool t_3 = t_2 == 0,
      temp bool t_4 = t_1 and t_3;
    guardCondition t_4;
    effect
      P_0.state = 2;

  process P_0
    guardBlock
      temp bool t_5 = P_0.state == 2;
    guardCondition t_5;
    effect
      P_0.state = 3,
      b[P_0.curr] = 1;

  process P_0
    guardBlock
      temp bool t_6 = P_0.state == 3,
      temp byte t_7 = turn[P_0.curr],
      temp bool t_8 = t_7 != 0,
      temp bool t_9 = t_6 and t_8;
    guardCondition t_9;
    effect
      P_0.state = 4;

  process P_0
    guardBlock
      temp bool t_10 = P_0.state == 4;
    guardCondition t_10;
    effect
      P_0.state = 5,
      c[P_0.curr] = 1;

  process P_0
    guardBlock
      temp bool t_11 = P_0.state == 5;
    guardCondition t_11;
    effect
      P_0.state = 6,
      b[P_0.curr] = 0;

  process P_0
    guardBlock
      temp bool t_12 = P_0.state == 3,
      temp byte t_13 = turn[P_0.curr],
      temp bool t_14 = t_13 == 0,
      temp bool t_15 = t_12 and t_14;
    guardCondition t_15;
    effect
      P_0.state = 7;

  process P_0
    guardBlock
      temp bool t_16 = P_0.state == 7,
      temp bool t_17 = P_0.curr > 0,
      temp int t_18 = P_0.curr - 1,
      temp byte t_19 = c[t_18],
      temp bool t_20 = t_19 == 0,
      temp bool t_21 = t_17 and t_20,
      temp bool t_22 = t_16 and t_21;
    guardCondition t_22;
    effect
      P_0.state = 8;

  process P_0
    guardBlock
      temp bool t_23 = P_0.state == 8;
    guardCondition t_23;
    effect
      P_0.state = 9;

  process P_0
    guardBlock
      temp bool t_24 = P_0.state == 7,
      temp bool t_25 = P_0.curr == 0,
      temp int t_26 = P_0.curr - 1,
      temp byte t_27 = c[t_26],
      temp bool t_28 = t_27 == 1,
      temp bool t_29 = t_25 or t_28,
      temp bool t_30 = t_24 and t_29;
    guardCondition t_30;
    effect
      P_0.state = 0,
      temp int t_31 = P_0.curr + 1,
      P_0.curr = t_31;

  process P_1
    guardBlock
      temp bool t_32 = P_1.state == 0;
    guardCondition t_32;
    effect
      P_1.state = 1,
      turn[P_1.curr] = 1;

  process P_1
    guardBlock
      temp bool t_33 = P_1.state == 1,
      temp byte t_34 = b[P_1.curr],
      temp bool t_35 = t_34 == 0,
      temp bool t_36 = t_33 and t_35;
    guardCondition t_36;
    effect
      P_1.state = 2;

  process P_1
    guardBlock
      temp bool t_37 = P_1.state == 2;
    guardCondition t_37;
    effect
      P_1.state = 3,
      b[P_1.curr] = 1;

  process P_1
    guardBlock
      temp bool t_38 = P_1.state == 3,
      temp byte t_39 = turn[P_1.curr],
      temp bool t_40 = t_39 != 1,
      temp bool t_41 = t_38 and t_40;
    guardCondition t_41;
    effect
      P_1.state = 4;

  process P_1
    guardBlock
      temp bool t_42 = P_1.state == 4;
    guardCondition t_42;
    effect
      P_1.state = 5,
      c[P_1.curr] = 1;

  process P_1
    guardBlock
      temp bool t_43 = P_1.state == 5;
    guardCondition t_43;
    effect
      P_1.state = 6,
      b[P_1.curr] = 0;

  process P_1
    guardBlock
      temp bool t_44 = P_1.state == 3,
      temp byte t_45 = turn[P_1.curr],
      temp bool t_46 = t_45 == 1,
      temp bool t_47 = t_44 and t_46;
    guardCondition t_47;
    effect
      P_1.state = 7;

  process P_1
    guardBlock
      temp bool t_48 = P_1.state == 7,
      temp bool t_49 = P_1.curr > 0,
      temp int t_50 = P_1.curr - 1,
      temp byte t_51 = c[t_50],
      temp bool t_52 = t_51 == 0,
      temp bool t_53 = t_49 and t_52,
      temp bool t_54 = t_48 and t_53;
    guardCondition t_54;
    effect
      P_1.state = 8;

  process P_1
    guardBlock
      temp bool t_55 = P_1.state == 8;
    guardCondition t_55;
    effect
      P_1.state = 9;

  process P_1
    guardBlock
      temp bool t_56 = P_1.state == 7,
      temp bool t_57 = P_1.curr == 0,
      temp int t_58 = P_1.curr - 1,
      temp byte t_59 = c[t_58],
      temp bool t_60 = t_59 == 1,
      temp bool t_61 = t_57 or t_60,
      temp bool t_62 = t_56 and t_61;
    guardCondition t_62;
    effect
      P_1.state = 0,
      temp int t_63 = P_1.curr + 1,
      P_1.curr = t_63;

  process P_2
    guardBlock
      temp bool t_64 = P_2.state == 0;
    guardCondition t_64;
    effect
      P_2.state = 1,
      turn[P_2.curr] = 2;

  process P_2
    guardBlock
      temp bool t_65 = P_2.state == 1,
      temp byte t_66 = b[P_2.curr],
      temp bool t_67 = t_66 == 0,
      temp bool t_68 = t_65 and t_67;
    guardCondition t_68;
    effect
      P_2.state = 2;

  process P_2
    guardBlock
      temp bool t_69 = P_2.state == 2;
    guardCondition t_69;
    effect
      P_2.state = 3,
      b[P_2.curr] = 1;

  process P_2
    guardBlock
      temp bool t_70 = P_2.state == 3,
      temp byte t_71 = turn[P_2.curr],
      temp bool t_72 = t_71 != 2,
      temp bool t_73 = t_70 and t_72;
    guardCondition t_73;
    effect
      P_2.state = 4;

  process P_2
    guardBlock
      temp bool t_74 = P_2.state == 4;
    guardCondition t_74;
    effect
      P_2.state = 5,
      c[P_2.curr] = 1;

  process P_2
    guardBlock
      temp bool t_75 = P_2.state == 5;
    guardCondition t_75;
    effect
      P_2.state = 6,
      b[P_2.curr] = 0;

  process P_2
    guardBlock
      temp bool t_76 = P_2.state == 3,
      temp byte t_77 = turn[P_2.curr],
      temp bool t_78 = t_77 == 2,
      temp bool t_79 = t_76 and t_78;
    guardCondition t_79;
    effect
      P_2.state = 7;

  process P_2
    guardBlock
      temp bool t_80 = P_2.state == 7,
      temp bool t_81 = P_2.curr > 0,
      temp int t_82 = P_2.curr - 1,
      temp byte t_83 = c[t_82],
      temp bool t_84 = t_83 == 0,
      temp bool t_85 = t_81 and t_84,
      temp bool t_86 = t_80 and t_85;
    guardCondition t_86;
    effect
      P_2.state = 8;

  process P_2
    guardBlock
      temp bool t_87 = P_2.state == 8;
    guardCondition t_87;
    effect
      P_2.state = 9;

  process P_2
    guardBlock
      temp bool t_88 = P_2.state == 7,
      temp bool t_89 = P_2.curr == 0,
      temp int t_90 = P_2.curr - 1,
      temp byte t_91 = c[t_90],
      temp bool t_92 = t_91 == 1,
      temp bool t_93 = t_89 or t_92,
      temp bool t_94 = t_88 and t_93;
    guardCondition t_94;
    effect
      P_2.state = 0,
      temp int t_95 = P_2.curr + 1,
      P_2.curr = t_95;

  process P_3
    guardBlock
      temp bool t_96 = P_3.state == 0;
    guardCondition t_96;
    effect
      P_3.state = 1,
      turn[P_3.curr] = 3;

  process P_3
    guardBlock
      temp bool t_97 = P_3.state == 1,
      temp byte t_98 = b[P_3.curr],
      temp bool t_99 = t_98 == 0,
      temp bool t_100 = t_97 and t_99;
    guardCondition t_100;
    effect
      P_3.state = 2;

  process P_3
    guardBlock
      temp bool t_101 = P_3.state == 2;
    guardCondition t_101;
    effect
      P_3.state = 3,
      b[P_3.curr] = 1;

  process P_3
    guardBlock
      temp bool t_102 = P_3.state == 3,
      temp byte t_103 = turn[P_3.curr],
      temp bool t_104 = t_103 != 3,
      temp bool t_105 = t_102 and t_104;
    guardCondition t_105;
    effect
      P_3.state = 4;

  process P_3
    guardBlock
      temp bool t_106 = P_3.state == 4;
    guardCondition t_106;
    effect
      P_3.state = 5,
      c[P_3.curr] = 1;

  process P_3
    guardBlock
      temp bool t_107 = P_3.state == 5;
    guardCondition t_107;
    effect
      P_3.state = 6,
      b[P_3.curr] = 0;

  process P_3
    guardBlock
      temp bool t_108 = P_3.state == 3,
      temp byte t_109 = turn[P_3.curr],
      temp bool t_110 = t_109 == 3,
      temp bool t_111 = t_108 and t_110;
    guardCondition t_111;
    effect
      P_3.state = 7;

  process P_3
    guardBlock
      temp bool t_112 = P_3.state == 7,
      temp bool t_113 = P_3.curr > 0,
      temp int t_114 = P_3.curr - 1,
      temp byte t_115 = c[t_114],
      temp bool t_116 = t_115 == 0,
      temp bool t_117 = t_113 and t_116,
      temp bool t_118 = t_112 and t_117;
    guardCondition t_118;
    effect
      P_3.state = 8;

  process P_3
    guardBlock
      temp bool t_119 = P_3.state == 8;
    guardCondition t_119;
    effect
      P_3.state = 9;

  process P_3
    guardBlock
      temp bool t_120 = P_3.state == 7,
      temp bool t_121 = P_3.curr == 0,
      temp int t_122 = P_3.curr - 1,
      temp byte t_123 = c[t_122],
      temp bool t_124 = t_123 == 1,
      temp bool t_125 = t_121 or t_124,
      temp bool t_126 = t_120 and t_125;
    guardCondition t_126;
    effect
      P_3.state = 0,
      temp int t_127 = P_3.curr + 1,
      P_3.curr = t_127;

  process P_4
    guardBlock
      temp bool t_128 = P_4.state == 0;
    guardCondition t_128;
    effect
      P_4.state = 1,
      turn[P_4.curr] = 4;

  process P_4
    guardBlock
      temp bool t_129 = P_4.state == 1,
      temp byte t_130 = b[P_4.curr],
      temp bool t_131 = t_130 == 0,
      temp bool t_132 = t_129 and t_131;
    guardCondition t_132;
    effect
      P_4.state = 2;

  process P_4
    guardBlock
      temp bool t_133 = P_4.state == 2;
    guardCondition t_133;
    effect
      P_4.state = 3,
      b[P_4.curr] = 1;

  process P_4
    guardBlock
      temp bool t_134 = P_4.state == 3,
      temp byte t_135 = turn[P_4.curr],
      temp bool t_136 = t_135 != 4,
      temp bool t_137 = t_134 and t_136;
    guardCondition t_137;
    effect
      P_4.state = 4;

  process P_4
    guardBlock
      temp bool t_138 = P_4.state == 4;
    guardCondition t_138;
    effect
      P_4.state = 5,
      c[P_4.curr] = 1;

  process P_4
    guardBlock
      temp bool t_139 = P_4.state == 5;
    guardCondition t_139;
    effect
      P_4.state = 6,
      b[P_4.curr] = 0;

  process P_4
    guardBlock
      temp bool t_140 = P_4.state == 3,
      temp byte t_141 = turn[P_4.curr],
      temp bool t_142 = t_141 == 4,
      temp bool t_143 = t_140 and t_142;
    guardCondition t_143;
    effect
      P_4.state = 7;

  process P_4
    guardBlock
      temp bool t_144 = P_4.state == 7,
      temp bool t_145 = P_4.curr > 0,
      temp int t_146 = P_4.curr - 1,
      temp byte t_147 = c[t_146],
      temp bool t_148 = t_147 == 0,
      temp bool t_149 = t_145 and t_148,
      temp bool t_150 = t_144 and t_149;
    guardCondition t_150;
    effect
      P_4.state = 8;

  process P_4
    guardBlock
      temp bool t_151 = P_4.state == 8;
    guardCondition t_151;
    effect
      P_4.state = 9;

  process P_4
    guardBlock
      temp bool t_152 = P_4.state == 7,
      temp bool t_153 = P_4.curr == 0,
      temp int t_154 = P_4.curr - 1,
      temp byte t_155 = c[t_154],
      temp bool t_156 = t_155 == 1,
      temp bool t_157 = t_153 or t_156,
      temp bool t_158 = t_152 and t_157;
    guardCondition t_158;
    effect
      P_4.state = 0,
      temp int t_159 = P_4.curr + 1,
      P_4.curr = t_159;

  process LTL_property
    guardBlock
      temp bool t_160 = LTL_property.state == 0,
      temp bool t_161 = P_0.state == 9,
      temp bool t_162 = P_1.state == 9,
      temp bool t_163 = t_161 or t_162,
      temp bool t_164 = P_2.state == 9,
      temp bool t_165 = t_163 or t_164,
      temp bool t_166 = P_3.state == 9,
      temp bool t_167 = t_165 or t_166,
      temp bool t_168 = P_4.state == 9,
      temp bool t_169 = t_167 or t_168,
      temp bool t_170 = not t_169,
      temp bool t_171 = t_160 and t_170;
    guardCondition t_171;
    effect
      LTL_property.state = 0;
      // accepting conditions
      // LTL_property.state == 0
