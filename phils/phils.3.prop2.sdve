byte fork[6] =  {0, 0, 0, 0, 0, 0};
state {think(0), one(1), eat(2), finish(3)} phil_0.state = 0;
state {think(0), one(1), eat(2), finish(3)} phil_1.state = 0;
state {think(0), one(1), eat(2), finish(3)} phil_2.state = 0;
state {think(0), one(1), eat(2), finish(3)} phil_3.state = 0;
state {think(0), one(1), eat(2), finish(3)} phil_4.state = 0;
state {think(0), one(1), eat(2), finish(3)} phil_5.state = 0;
state {q1(0), q2(1)} LTL_property.state = 0;

  process phil_0
    guardBlock
      temp bool t_0 = phil_0.state == 0,
      temp byte t_1 = fork[1],
      temp bool t_2 = t_1 == 0,
      temp bool t_3 = t_0 and t_2;
    guardCondition t_3;
    effect
      phil_0.state = 1,
      fork[1] = 1;

  process phil_0
    guardBlock
      temp bool t_4 = phil_0.state == 1,
      temp byte t_5 = fork[0],
      temp bool t_6 = t_5 == 0,
      temp bool t_7 = t_4 and t_6;
    guardCondition t_7;
    effect
      phil_0.state = 2,
      fork[0] = 1;

  process phil_0
    guardBlock
      temp bool t_8 = phil_0.state == 2;
    guardCondition t_8;
    effect
      phil_0.state = 3,
      fork[1] = 0;

  process phil_0
    guardBlock
      temp bool t_9 = phil_0.state == 3;
    guardCondition t_9;
    effect
      phil_0.state = 0,
      fork[0] = 0;

  process phil_1
    guardBlock
      temp bool t_10 = phil_1.state == 0,
      temp byte t_11 = fork[1],
      temp bool t_12 = t_11 == 0,
      temp bool t_13 = t_10 and t_12;
    guardCondition t_13;
    effect
      phil_1.state = 1,
      fork[1] = 1;

  process phil_1
    guardBlock
      temp bool t_14 = phil_1.state == 1,
      temp byte t_15 = fork[2],
      temp bool t_16 = t_15 == 0,
      temp bool t_17 = t_14 and t_16;
    guardCondition t_17;
    effect
      phil_1.state = 2,
      fork[2] = 1;

  process phil_1
    guardBlock
      temp bool t_18 = phil_1.state == 2;
    guardCondition t_18;
    effect
      phil_1.state = 3,
      fork[1] = 0;

  process phil_1
    guardBlock
      temp bool t_19 = phil_1.state == 3;
    guardCondition t_19;
    effect
      phil_1.state = 0,
      fork[2] = 0;

  process phil_2
    guardBlock
      temp bool t_20 = phil_2.state == 0,
      temp byte t_21 = fork[2],
      temp bool t_22 = t_21 == 0,
      temp bool t_23 = t_20 and t_22;
    guardCondition t_23;
    effect
      phil_2.state = 1,
      fork[2] = 1;

  process phil_2
    guardBlock
      temp bool t_24 = phil_2.state == 1,
      temp byte t_25 = fork[3],
      temp bool t_26 = t_25 == 0,
      temp bool t_27 = t_24 and t_26;
    guardCondition t_27;
    effect
      phil_2.state = 2,
      fork[3] = 1;

  process phil_2
    guardBlock
      temp bool t_28 = phil_2.state == 2;
    guardCondition t_28;
    effect
      phil_2.state = 3,
      fork[2] = 0;

  process phil_2
    guardBlock
      temp bool t_29 = phil_2.state == 3;
    guardCondition t_29;
    effect
      phil_2.state = 0,
      fork[3] = 0;

  process phil_3
    guardBlock
      temp bool t_30 = phil_3.state == 0,
      temp byte t_31 = fork[3],
      temp bool t_32 = t_31 == 0,
      temp bool t_33 = t_30 and t_32;
    guardCondition t_33;
    effect
      phil_3.state = 1,
      fork[3] = 1;

  process phil_3
    guardBlock
      temp bool t_34 = phil_3.state == 1,
      temp byte t_35 = fork[4],
      temp bool t_36 = t_35 == 0,
      temp bool t_37 = t_34 and t_36;
    guardCondition t_37;
    effect
      phil_3.state = 2,
      fork[4] = 1;

  process phil_3
    guardBlock
      temp bool t_38 = phil_3.state == 2;
    guardCondition t_38;
    effect
      phil_3.state = 3,
      fork[3] = 0;

  process phil_3
    guardBlock
      temp bool t_39 = phil_3.state == 3;
    guardCondition t_39;
    effect
      phil_3.state = 0,
      fork[4] = 0;

  process phil_4
    guardBlock
      temp bool t_40 = phil_4.state == 0,
      temp byte t_41 = fork[4],
      temp bool t_42 = t_41 == 0,
      temp bool t_43 = t_40 and t_42;
    guardCondition t_43;
    effect
      phil_4.state = 1,
      fork[4] = 1;

  process phil_4
    guardBlock
      temp bool t_44 = phil_4.state == 1,
      temp byte t_45 = fork[5],
      temp bool t_46 = t_45 == 0,
      temp bool t_47 = t_44 and t_46;
    guardCondition t_47;
    effect
      phil_4.state = 2,
      fork[5] = 1;

  process phil_4
    guardBlock
      temp bool t_48 = phil_4.state == 2;
    guardCondition t_48;
    effect
      phil_4.state = 3,
      fork[4] = 0;

  process phil_4
    guardBlock
      temp bool t_49 = phil_4.state == 3;
    guardCondition t_49;
    effect
      phil_4.state = 0,
      fork[5] = 0;

  process phil_5
    guardBlock
      temp bool t_50 = phil_5.state == 0,
      temp byte t_51 = fork[5],
      temp bool t_52 = t_51 == 0,
      temp bool t_53 = t_50 and t_52;
    guardCondition t_53;
    effect
      phil_5.state = 1,
      fork[5] = 1;

  process phil_5
    guardBlock
      temp bool t_54 = phil_5.state == 1,
      temp byte t_55 = fork[0],
      temp bool t_56 = t_55 == 0,
      temp bool t_57 = t_54 and t_56;
    guardCondition t_57;
    effect
      phil_5.state = 2,
      fork[0] = 1;

  process phil_5
    guardBlock
      temp bool t_58 = phil_5.state == 2;
    guardCondition t_58;
    effect
      phil_5.state = 3,
      fork[5] = 0;

  process phil_5
    guardBlock
      temp bool t_59 = phil_5.state == 3;
    guardCondition t_59;
    effect
      phil_5.state = 0,
      fork[0] = 0;

  process LTL_property
    guardBlock
      temp bool t_60 = LTL_property.state == 0;
    guardCondition t_60;
    effect
      LTL_property.state = 0;

  process LTL_property
    guardBlock
      temp bool t_61 = LTL_property.state == 0,
      temp bool t_62 = phil_0.state == 1,
      temp bool t_63 = phil_0.state == 2,
      temp bool t_64 = not t_63,
      temp bool t_65 = t_62 and t_64,
      temp bool t_66 = t_61 and t_65;
    guardCondition t_66;
    effect
      LTL_property.state = 1;

  process LTL_property
    guardBlock
      temp bool t_67 = LTL_property.state == 1,
      temp bool t_68 = phil_0.state == 2,
      temp bool t_69 = not t_68,
      temp bool t_70 = t_67 and t_69;
    guardCondition t_70;
    effect
      LTL_property.state = 1;
      accepting conditions
      LTL_property.state == 1
