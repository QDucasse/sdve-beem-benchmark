byte choosing[4] =  {0, 0, 0};
byte number[4] =  {0, 0, 0};
state {NCS(0), choose(1), for_loop(2), wait(3), CS(4)} P_0.state = 0;
byte P_0.j = 0;
byte P_0.max = 0;
state {NCS(0), choose(1), for_loop(2), wait(3), CS(4)} P_1.state = 0;
byte P_1.j = 0;
byte P_1.max = 0;
state {NCS(0), choose(1), for_loop(2), wait(3), CS(4)} P_2.state = 0;
byte P_2.j = 0;
byte P_2.max = 0;
state {q1(0), q2(1)} LTL_property.state = 0;

  process P_0
    guardBlock
      temp bool t_0 = P_0.state == 0;
    guardCondition t_0;
    effect
      P_0.state = 1,
      choosing[0] = 1,
      P_0.j = 0,
      P_0.max = 0;

  process P_0
    guardBlock
      temp bool t_1 = P_0.state == 1,
      temp bool t_2 = P_0.j < 3,
      temp byte t_3 = number[P_0.j],
      temp bool t_4 = t_3 > P_0.max,
      temp bool t_5 = t_2 and t_4,
      temp bool t_6 = t_1 and t_5;
    guardCondition t_6;
    effect
      P_0.state = 1,
      temp byte t_7 = number[P_0.j],
      P_0.max = t_7,
      temp int t_8 = P_0.j + 1,
      P_0.j = t_8;

  process P_0
    guardBlock
      temp bool t_9 = P_0.state == 1,
      temp bool t_10 = P_0.j < 3,
      temp byte t_11 = number[P_0.j],
      temp bool t_12 = t_11 <= P_0.max,
      temp bool t_13 = t_10 and t_12,
      temp bool t_14 = t_9 and t_13;
    guardCondition t_14;
    effect
      P_0.state = 1,
      temp int t_15 = P_0.j + 1,
      P_0.j = t_15;

  process P_0
    guardBlock
      temp bool t_16 = P_0.state == 1,
      temp bool t_17 = P_0.j == 3,
      temp bool t_18 = P_0.max < 6,
      temp bool t_19 = t_17 and t_18,
      temp bool t_20 = t_16 and t_19;
    guardCondition t_20;
    effect
      P_0.state = 2,
      temp int t_21 = P_0.max + 1,
      number[0] = t_21,
      P_0.j = 0,
      choosing[0] = 0;

  process P_0
    guardBlock
      temp bool t_22 = P_0.state == 2,
      temp bool t_23 = P_0.j < 3,
      temp byte t_24 = choosing[P_0.j],
      temp bool t_25 = t_24 == 0,
      temp bool t_26 = t_23 and t_25,
      temp bool t_27 = t_22 and t_26;
    guardCondition t_27;
    effect
      P_0.state = 3;

  process P_0
    guardBlock
      temp bool t_28 = P_0.state == 3,
      temp byte t_29 = number[P_0.j],
      temp bool t_30 = t_29 == 0,
      temp byte t_31 = number[P_0.j],
      temp byte t_32 = number[0],
      temp bool t_33 = t_31 < t_32,
      temp bool t_34 = t_30 or t_33,
      temp byte t_35 = number[P_0.j],
      temp byte t_36 = number[0],
      temp bool t_37 = t_35 == t_36,
      temp bool t_38 = 0 <= P_0.j,
      temp bool t_39 = t_37 and t_38,
      temp bool t_40 = t_34 or t_39,
      temp bool t_41 = t_28 and t_40;
    guardCondition t_41;
    effect
      P_0.state = 2,
      temp int t_42 = P_0.j + 1,
      P_0.j = t_42;

  process P_0
    guardBlock
      temp bool t_43 = P_0.state == 2,
      temp bool t_44 = P_0.j == 3,
      temp bool t_45 = t_43 and t_44;
    guardCondition t_45;
    effect
      P_0.state = 4;

  process P_0
    guardBlock
      temp bool t_46 = P_0.state == 4;
    guardCondition t_46;
    effect
      P_0.state = 0,
      number[0] = 0;

  process P_1
    guardBlock
      temp bool t_47 = P_1.state == 0;
    guardCondition t_47;
    effect
      P_1.state = 1,
      choosing[1] = 1,
      P_1.j = 0,
      P_1.max = 0;

  process P_1
    guardBlock
      temp bool t_48 = P_1.state == 1,
      temp bool t_49 = P_1.j < 3,
      temp byte t_50 = number[P_1.j],
      temp bool t_51 = t_50 > P_1.max,
      temp bool t_52 = t_49 and t_51,
      temp bool t_53 = t_48 and t_52;
    guardCondition t_53;
    effect
      P_1.state = 1,
      temp byte t_54 = number[P_1.j],
      P_1.max = t_54,
      temp int t_55 = P_1.j + 1,
      P_1.j = t_55;

  process P_1
    guardBlock
      temp bool t_56 = P_1.state == 1,
      temp bool t_57 = P_1.j < 3,
      temp byte t_58 = number[P_1.j],
      temp bool t_59 = t_58 <= P_1.max,
      temp bool t_60 = t_57 and t_59,
      temp bool t_61 = t_56 and t_60;
    guardCondition t_61;
    effect
      P_1.state = 1,
      temp int t_62 = P_1.j + 1,
      P_1.j = t_62;

  process P_1
    guardBlock
      temp bool t_63 = P_1.state == 1,
      temp bool t_64 = P_1.j == 3,
      temp bool t_65 = P_1.max < 6,
      temp bool t_66 = t_64 and t_65,
      temp bool t_67 = t_63 and t_66;
    guardCondition t_67;
    effect
      P_1.state = 2,
      temp int t_68 = P_1.max + 1,
      number[1] = t_68,
      P_1.j = 0,
      choosing[1] = 0;

  process P_1
    guardBlock
      temp bool t_69 = P_1.state == 2,
      temp bool t_70 = P_1.j < 3,
      temp byte t_71 = choosing[P_1.j],
      temp bool t_72 = t_71 == 0,
      temp bool t_73 = t_70 and t_72,
      temp bool t_74 = t_69 and t_73;
    guardCondition t_74;
    effect
      P_1.state = 3;

  process P_1
    guardBlock
      temp bool t_75 = P_1.state == 3,
      temp byte t_76 = number[P_1.j],
      temp bool t_77 = t_76 == 0,
      temp byte t_78 = number[P_1.j],
      temp byte t_79 = number[1],
      temp bool t_80 = t_78 < t_79,
      temp bool t_81 = t_77 or t_80,
      temp byte t_82 = number[P_1.j],
      temp byte t_83 = number[1],
      temp bool t_84 = t_82 == t_83,
      temp bool t_85 = 1 <= P_1.j,
      temp bool t_86 = t_84 and t_85,
      temp bool t_87 = t_81 or t_86,
      temp bool t_88 = t_75 and t_87;
    guardCondition t_88;
    effect
      P_1.state = 2,
      temp int t_89 = P_1.j + 1,
      P_1.j = t_89;

  process P_1
    guardBlock
      temp bool t_90 = P_1.state == 2,
      temp bool t_91 = P_1.j == 3,
      temp bool t_92 = t_90 and t_91;
    guardCondition t_92;
    effect
      P_1.state = 4;

  process P_1
    guardBlock
      temp bool t_93 = P_1.state == 4;
    guardCondition t_93;
    effect
      P_1.state = 0,
      number[1] = 0;

  process P_2
    guardBlock
      temp bool t_94 = P_2.state == 0;
    guardCondition t_94;
    effect
      P_2.state = 1,
      choosing[2] = 1,
      P_2.j = 0,
      P_2.max = 0;

  process P_2
    guardBlock
      temp bool t_95 = P_2.state == 1,
      temp bool t_96 = P_2.j < 3,
      temp byte t_97 = number[P_2.j],
      temp bool t_98 = t_97 > P_2.max,
      temp bool t_99 = t_96 and t_98,
      temp bool t_100 = t_95 and t_99;
    guardCondition t_100;
    effect
      P_2.state = 1,
      temp byte t_101 = number[P_2.j],
      P_2.max = t_101,
      temp int t_102 = P_2.j + 1,
      P_2.j = t_102;

  process P_2
    guardBlock
      temp bool t_103 = P_2.state == 1,
      temp bool t_104 = P_2.j < 3,
      temp byte t_105 = number[P_2.j],
      temp bool t_106 = t_105 <= P_2.max,
      temp bool t_107 = t_104 and t_106,
      temp bool t_108 = t_103 and t_107;
    guardCondition t_108;
    effect
      P_2.state = 1,
      temp int t_109 = P_2.j + 1,
      P_2.j = t_109;

  process P_2
    guardBlock
      temp bool t_110 = P_2.state == 1,
      temp bool t_111 = P_2.j == 3,
      temp bool t_112 = P_2.max < 6,
      temp bool t_113 = t_111 and t_112,
      temp bool t_114 = t_110 and t_113;
    guardCondition t_114;
    effect
      P_2.state = 2,
      temp int t_115 = P_2.max + 1,
      number[2] = t_115,
      P_2.j = 0,
      choosing[2] = 0;

  process P_2
    guardBlock
      temp bool t_116 = P_2.state == 2,
      temp bool t_117 = P_2.j < 3,
      temp byte t_118 = choosing[P_2.j],
      temp bool t_119 = t_118 == 0,
      temp bool t_120 = t_117 and t_119,
      temp bool t_121 = t_116 and t_120;
    guardCondition t_121;
    effect
      P_2.state = 3;

  process P_2
    guardBlock
      temp bool t_122 = P_2.state == 3,
      temp byte t_123 = number[P_2.j],
      temp bool t_124 = t_123 == 0,
      temp byte t_125 = number[P_2.j],
      temp byte t_126 = number[2],
      temp bool t_127 = t_125 < t_126,
      temp bool t_128 = t_124 or t_127,
      temp byte t_129 = number[P_2.j],
      temp byte t_130 = number[2],
      temp bool t_131 = t_129 == t_130,
      temp bool t_132 = 2 <= P_2.j,
      temp bool t_133 = t_131 and t_132,
      temp bool t_134 = t_128 or t_133,
      temp bool t_135 = t_122 and t_134;
    guardCondition t_135;
    effect
      P_2.state = 2,
      temp int t_136 = P_2.j + 1,
      P_2.j = t_136;

  process P_2
    guardBlock
      temp bool t_137 = P_2.state == 2,
      temp bool t_138 = P_2.j == 3,
      temp bool t_139 = t_137 and t_138;
    guardCondition t_139;
    effect
      P_2.state = 4;

  process P_2
    guardBlock
      temp bool t_140 = P_2.state == 4;
    guardCondition t_140;
    effect
      P_2.state = 0,
      number[2] = 0;

  process LTL_property
    guardBlock
      temp bool t_141 = LTL_property.state == 0;
    guardCondition t_141;
    effect
      LTL_property.state = 0;

  process LTL_property
    guardBlock
      temp bool t_142 = LTL_property.state == 0,
      temp bool t_143 = P_0.state == 4,
      temp bool t_144 = not t_143,
      temp bool t_145 = t_142 and t_144;
    guardCondition t_145;
    effect
      LTL_property.state = 1;

  process LTL_property
    guardBlock
      temp bool t_146 = LTL_property.state == 1,
      temp bool t_147 = P_0.state == 4,
      temp bool t_148 = not t_147,
      temp bool t_149 = t_146 and t_148;
    guardCondition t_149;
    effect
      LTL_property.state = 1;
      accepting conditions
      LTL_property.state == 1
