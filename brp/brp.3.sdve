state {ready(0), start_send(1), wait_result(2), check(3)} Producer.state = 0;
state {ready(0), get_msg(1), check(2), st_error(3)} Consumer.state = 0;
state {idle(0), next_frame(1), wait_ack(2), send(3), success(4), q_error(5), ret(6)} Sender.state = 0;
state {idle(0), new_file(1), frame_received(2), frame_reported(3), first_safe(4), ret(5)} Receiver.state = 1;
state {ready(0), got_msg(1)} K.state = 0;
state {ready(0), got_msg(1)} L.state = 0;
byte prod_n = 0;
byte Producer.result = 0;
byte Producer.n = 0;
byte Consumer.m = 0;
byte Consumer.n = 0;
byte Sender.ab = 0;
byte Sender.n = 0;
byte Sender.i = 0;
byte Sender.counter = 0;
byte Receiver.value = 0;
byte Receiver.exp_ab = 0;
byte K.value = 0;

  process Producer 
    guardBlock
      temp bool t_0 = Producer.state == 0;

    guardCondition t_0;
    effect
      Producer.state = 1,
      prod_n = 1;

  process Producer 
    guardBlock
      temp bool t_1 = Producer.state == 0;

    guardCondition t_1;
    effect
      Producer.state = 1,
      prod_n = 2;

  process Producer 
    guardBlock
      temp bool t_2 = Producer.state == 0;

    guardCondition t_2;
    effect
      Producer.state = 1,
      prod_n = 3;

  process Producer 
    guardBlock
      temp bool t_3 = Producer.state == 0;

    guardCondition t_3;
    effect
      Producer.state = 1,
      prod_n = 4;

  process Producer 
    guardBlock
      temp bool t_4 = Producer.state == 0;

    guardCondition t_4;
    effect
      Producer.state = 1,
      prod_n = 5;

  process Producer 
    guardBlock
      temp bool t_5 = Producer.state == 0;

    guardCondition t_5;
    effect
      Producer.state = 1,
      prod_n = 6;

  process Producer 
    guardBlock
      temp bool t_6 = Producer.state == 0;

    guardCondition t_6;
    effect
      Producer.state = 1,
      prod_n = 7;

  process Producer 
    guardBlock
      temp bool t_7 = Producer.state == 0;

    guardCondition t_7;
    effect
      Producer.state = 1,
      prod_n = 8;

  process Producer 
    guardBlock
      temp bool t_8 = Producer.state == 0;

    guardCondition t_8;
    effect
      Producer.state = 1,
      prod_n = 9;

  process Producer 
    guardBlock
      temp bool t_9 = Producer.state == 0;

    guardCondition t_9;
    effect
      Producer.state = 1,
      prod_n = 10;

  process Producer 
    guardBlock
      temp bool t_10 = Producer.state == 3,
      temp bool t_11 = Producer.result == 2,
      temp bool t_12 = Producer.result == 3,
      temp bool t_13 = t_11 or t_12,
      temp bool t_14 = t_10 and t_13;

    guardCondition t_14;
    effect
      Producer.state = 1;

  process Consumer 
    guardBlock
      temp bool t_15 = Consumer.state == 1,
      temp bool t_16 = Consumer.m == 4,
      temp bool t_17 = Consumer.m == 5,
      temp bool t_18 = t_16 or t_17,
      temp bool t_19 = t_15 and t_18;

    guardCondition t_19;
    effect
      Consumer.state = 0;

  process Consumer 
    guardBlock
      temp bool t_20 = Consumer.state == 1,
      temp bool t_21 = Consumer.m == 2,
      temp bool t_22 = t_20 and t_21;

    guardCondition t_22;
    effect
      Consumer.state = 0,
      Consumer.n = 0;

  process Consumer 
    guardBlock
      temp bool t_23 = Consumer.state == 1,
      temp bool t_24 = Consumer.m == 1,
      temp bool t_25 = t_23 and t_24;

    guardCondition t_25;
    effect
      Consumer.state = 2;

  process Consumer 
    guardBlock
      temp bool t_26 = Consumer.state == 2,
      temp bool t_27 = Consumer.n != prod_n,
      temp bool t_28 = t_26 and t_27;

    guardCondition t_28;
    effect
      Consumer.state = 3;

  process Sender 
    guardBlock
      temp bool t_29 = Sender.state == 1;

    guardCondition t_29;
    effect
      Sender.state = 3,
      Sender.counter = 0;

  process Sender 
    guardBlock
      temp bool t_30 = Sender.state == 4,
      temp bool t_31 = Sender.i < Sender.n,
      temp bool t_32 = t_30 and t_31;

    guardCondition t_32;
    effect
      Sender.state = 1,
      temp byte t_33 = Sender.i + 1,
      Sender.i = t_33;

  process Receiver 
    guardBlock
      temp bool t_34 = Receiver.state == 4;

    guardCondition t_34;
    effect
      Receiver.state = 2,
      temp byte t_35 = Receiver.value & 1,
      Receiver.exp_ab = t_35;

  process Receiver 
    guardBlock
      temp bool t_36 = Receiver.state == 0,
      temp byte t_37 = Receiver.value & 2,
      temp bool t_38 = t_37 == 2,
      temp bool t_39 = t_36 and t_38;

    guardCondition t_39;
    effect
      Receiver.state = 5;

  process L_Sender 
    guardBlock
      temp bool t_40 = L.state == 1,
      temp bool t_41 = Sender.state == 2,
      temp bool t_42 = t_40 and t_41;

    guardCondition t_42;
    effect
      L.state = 0,
      Sender.state = 4,
      temp byte t_43 = 1 - Sender.ab,
      Sender.ab = t_43;

  process Producer_Consumer 
    guardBlock
      temp bool t_44 = Producer.state == 3,
      temp bool t_45 = Producer.result == 1,
      temp bool t_46 = t_44 and t_45,
      temp bool t_47 = Consumer.state == 2,
      temp bool t_48 = Consumer.n == prod_n,
      temp bool t_49 = t_47 and t_48,
      temp bool t_50 = t_46 and t_49;

    guardCondition t_50;
    effect
      Producer.state = 0,
      Consumer.state = 0;

  process Sender_Producer 
    guardBlock
      temp bool t_51 = Sender.state == 4,
      temp bool t_52 = Sender.i == Sender.n,
      temp bool t_53 = t_51 and t_52,
      temp bool t_54 = Producer.state == 2,
      temp bool t_55 = t_53 and t_54;

    guardCondition t_55;
    effect
      Sender.state = 6,
      Producer.result = 1,
      Producer.state = 3;

  process Sender_Producer 
    guardBlock
      temp bool t_56 = Sender.state == 5,
      temp bool t_57 = Sender.i < Sender.n,
      temp bool t_58 = t_56 and t_57,
      temp bool t_59 = Producer.state == 2,
      temp bool t_60 = t_58 and t_59;

    guardCondition t_60;
    effect
      Sender.state = 6,
      Producer.result = 2,
      Producer.state = 3;

  process Sender_Producer 
    guardBlock
      temp bool t_61 = Sender.state == 5,
      temp bool t_62 = Sender.i == Sender.n,
      temp bool t_63 = t_61 and t_62,
      temp bool t_64 = Producer.state == 2,
      temp bool t_65 = t_63 and t_64;

    guardCondition t_65;
    effect
      Sender.state = 6,
      Producer.result = 3,
      Producer.state = 3;

  process Receiver_Consumer 
    guardBlock
      temp bool t_66 = Receiver.state == 2,
      temp byte t_67 = Receiver.value & 1,
      temp bool t_68 = t_67 == Receiver.exp_ab,
      temp byte t_69 = Receiver.value & 2,
      temp bool t_70 = t_69 == 2,
      temp bool t_71 = t_68 and t_70,
      temp bool t_72 = t_66 and t_71,
      temp bool t_73 = Consumer.state == 0,
      temp bool t_74 = t_72 and t_73;

    guardCondition t_74;
    effect
      Receiver.state = 3,
      Consumer.m = 1,
      Consumer.state = 1,
      temp byte t_75 = Consumer.n + 1,
      Consumer.n = t_75;

  process Receiver_Consumer 
    guardBlock
      temp bool t_76 = Receiver.state == 2,
      temp byte t_77 = Receiver.value & 1,
      temp bool t_78 = t_77 == Receiver.exp_ab,
      temp byte t_79 = Receiver.value & 2,
      temp bool t_80 = t_79 == 0,
      temp bool t_81 = t_78 and t_80,
      temp byte t_82 = Receiver.value & 4,
      temp bool t_83 = t_82 == 0,
      temp bool t_84 = t_81 and t_83,
      temp bool t_85 = t_76 and t_84,
      temp bool t_86 = Consumer.state == 0,
      temp bool t_87 = t_85 and t_86;

    guardCondition t_87;
    effect
      Receiver.state = 3,
      Consumer.m = 5,
      Consumer.state = 1,
      temp byte t_88 = Consumer.n + 1,
      Consumer.n = t_88;

  process Receiver_Consumer 
    guardBlock
      temp bool t_89 = Receiver.state == 2,
      temp byte t_90 = Receiver.value & 1,
      temp bool t_91 = t_90 == Receiver.exp_ab,
      temp byte t_92 = Receiver.value & 2,
      temp bool t_93 = t_92 == 0,
      temp bool t_94 = t_91 and t_93,
      temp byte t_95 = Receiver.value & 4,
      temp bool t_96 = t_95 == 4,
      temp bool t_97 = t_94 and t_96,
      temp bool t_98 = t_89 and t_97,
      temp bool t_99 = Consumer.state == 0,
      temp bool t_100 = t_98 and t_99;

    guardCondition t_100;
    effect
      Receiver.state = 3,
      Consumer.m = 4,
      Consumer.state = 1,
      temp byte t_101 = Consumer.n + 1,
      Consumer.n = t_101;

  process Receiver_Consumer 
    guardBlock
      temp bool t_102 = Receiver.state == 0,
      temp bool t_103 = Consumer.state == 0,
      temp bool t_104 = t_102 and t_103;

    guardCondition t_104;
    effect
      Receiver.state = 5,
      Consumer.m = 2,
      Consumer.state = 1,
      temp byte t_105 = Consumer.n + 1,
      Consumer.n = t_105;

  process Sender_Receiver 
    guardBlock
      temp bool t_106 = Sender.state == 6,
      temp bool t_107 = Receiver.state == 5,
      temp bool t_108 = t_106 and t_107;

    guardCondition t_108;
    effect
      Sender.state = 0,
      Receiver.state = 1;

  process Sender_Receiver 
    guardBlock
      temp bool t_109 = Sender.state == 6,
      temp bool t_110 = Receiver.state == 1,
      temp bool t_111 = t_109 and t_110;

    guardCondition t_111;
    effect
      Sender.state = 0,
      Receiver.state = 1;

  process Receiver_L 
    guardBlock
      temp bool t_112 = Receiver.state == 2,
      temp byte t_113 = Receiver.value & 1,
      temp bool t_114 = Receiver.exp_ab != t_113,
      temp bool t_115 = t_112 and t_114,
      temp bool t_116 = L.state == 0,
      temp bool t_117 = t_115 and t_116;

    guardCondition t_117;
    effect
      Receiver.state = 0,
      L.state = 1;

  process Receiver_L 
    guardBlock
      temp bool t_118 = Receiver.state == 3,
      temp bool t_119 = L.state == 0,
      temp bool t_120 = t_118 and t_119;

    guardCondition t_120;
    effect
      Receiver.state = 0,
      temp byte t_121 = 1 - Receiver.exp_ab,
      Receiver.exp_ab = t_121,
      L.state = 1;

  process Sender_K 
    guardBlock
      temp bool t_122 = Sender.state == 3,
      temp bool t_123 = Sender.i == 1,
      temp bool t_124 = Sender.i == Sender.n,
      temp bool t_125 = t_123 and t_124,
      temp bool t_126 = t_122 and t_125,
      temp bool t_127 = K.state == 0,
      temp bool t_128 = t_126 and t_127;

    guardCondition t_128;
    effect
      Sender.state = 2,
      temp byte t_129 = 6 + Sender.ab,
      K.value = t_129,
      K.state = 1;

  process Sender_K 
    guardBlock
      temp bool t_130 = Sender.state == 3,
      temp bool t_131 = Sender.i > 1,
      temp bool t_132 = Sender.i == Sender.n,
      temp bool t_133 = t_131 and t_132,
      temp bool t_134 = t_130 and t_133,
      temp bool t_135 = K.state == 0,
      temp bool t_136 = t_134 and t_135;

    guardCondition t_136;
    effect
      Sender.state = 2,
      temp byte t_137 = 2 + Sender.ab,
      K.value = t_137,
      K.state = 1;

  process Sender_K 
    guardBlock
      temp bool t_138 = Sender.state == 3,
      temp bool t_139 = Sender.i == 1,
      temp bool t_140 = Sender.i < Sender.n,
      temp bool t_141 = t_139 and t_140,
      temp bool t_142 = t_138 and t_141,
      temp bool t_143 = K.state == 0,
      temp bool t_144 = t_142 and t_143;

    guardCondition t_144;
    effect
      Sender.state = 2,
      temp byte t_145 = 4 + Sender.ab,
      K.value = t_145,
      K.state = 1;

  process Sender_K 
    guardBlock
      temp bool t_146 = Sender.state == 3,
      temp bool t_147 = Sender.i > 1,
      temp bool t_148 = Sender.i < Sender.n,
      temp bool t_149 = t_147 and t_148,
      temp bool t_150 = t_146 and t_149,
      temp bool t_151 = K.state == 0,
      temp bool t_152 = t_150 and t_151;

    guardCondition t_152;
    effect
      Sender.state = 2,
      K.value = Sender.ab,
      K.state = 1;

  process K_Receiver 
    guardBlock
      temp bool t_153 = K.state == 1,
      temp bool t_154 = Receiver.state == 1,
      temp bool t_155 = t_153 and t_154;

    guardCondition t_155;
    effect
      K.state = 0,
      Receiver.value = K.value,
      Receiver.state = 4;

  process K_Receiver 
    guardBlock
      temp bool t_156 = K.state == 1,
      temp bool t_157 = Receiver.state == 0,
      temp bool t_158 = t_156 and t_157;

    guardCondition t_158;
    effect
      K.state = 0,
      Receiver.value = K.value,
      Receiver.state = 2;

  process Producer_Sender 
    guardBlock
      temp bool t_159 = Producer.state == 1,
      temp bool t_160 = Sender.state == 0,
      temp bool t_161 = t_159 and t_160;

    guardCondition t_161;
    effect
      Producer.state = 2,
      Sender.n = prod_n,
      Sender.state = 1,
      Sender.i = 1;

  process K_Sender 
    guardBlock
      temp bool t_162 = K.state == 1,
      temp bool t_163 = Sender.state == 2,
      temp bool t_164 = Sender.counter == 10,
      temp bool t_165 = t_163 and t_164,
      temp bool t_166 = t_162 and t_165;

    guardCondition t_166;
    effect
      K.state = 0,
      Sender.state = 5;

  process K_Sender 
    guardBlock
      temp bool t_167 = K.state == 1,
      temp bool t_168 = Sender.state == 2,
      temp bool t_169 = Sender.counter < 10,
      temp bool t_170 = t_168 and t_169,
      temp bool t_171 = t_167 and t_170;

    guardCondition t_171;
    effect
      K.state = 0,
      Sender.state = 3,
      temp byte t_172 = Sender.counter + 1,
      Sender.counter = t_172;

  process L_Sender 
    guardBlock
      temp bool t_173 = L.state == 1,
      temp bool t_174 = Sender.state == 2,
      temp bool t_175 = Sender.counter == 10,
      temp bool t_176 = t_174 and t_175,
      temp bool t_177 = t_173 and t_176;

    guardCondition t_177;
    effect
      L.state = 0,
      Sender.state = 5;

  process L_Sender 
    guardBlock
      temp bool t_178 = L.state == 1,
      temp bool t_179 = Sender.state == 2,
      temp bool t_180 = Sender.counter < 10,
      temp bool t_181 = t_179 and t_180,
      temp bool t_182 = t_178 and t_181;

    guardCondition t_182;
    effect
      L.state = 0,
      Sender.state = 3,
      temp byte t_183 = Sender.counter + 1,
      Sender.counter = t_183;


