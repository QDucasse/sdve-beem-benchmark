byte prod_n = 0;
state {ready(0), start_send(1), wait_result(2), check(3)} Producer.state = 0;
byte Producer.result = 0;
byte Producer.n = 0;
state {ready(0), get_msg(1), check(2), st_error(3)} Consumer.state = 0;
byte Consumer.m = 0;
byte Consumer.n = 0;
state {idle(0), next_frame(1), wait_ack(2), send(3), success(4), q_error(5), ret(6)} Sender.state = 0;
byte Sender.ab = 0;
byte Sender.n = 0;
byte Sender.i = 0;
byte Sender.counter = 0;
state {idle(0), new_file(1), frame_received(2), frame_reported(3), first_safe(4), ret(5)} Receiver.state = 1;
byte Receiver.value = 0;
byte Receiver.exp_ab = 0;
state {ready(0), got_msg(1)} K.state = 0;
byte K.value = 0;
state {ready(0), got_msg(1)} L.state = 0;
state {q1(0), q2(1)} LTL_property.state = 0;

  process Producer
    guardBlock
      temp bool t_0 = Producer.state == 0;
    guardCondition t_0;
    effect
      Producer.state = 1,
      prod_n = 1;

  process Producer
    guardBlock
      temp bool t_1 = Producer.state == 0;
    guardCondition t_1;
    effect
      Producer.state = 1,
      prod_n = 2;

  process Producer
    guardBlock
      temp bool t_2 = Producer.state == 0;
    guardCondition t_2;
    effect
      Producer.state = 1,
      prod_n = 3;

  process Producer
    guardBlock
      temp bool t_3 = Producer.state == 0;
    guardCondition t_3;
    effect
      Producer.state = 1,
      prod_n = 4;

  process Producer
    guardBlock
      temp bool t_4 = Producer.state == 0;
    guardCondition t_4;
    effect
      Producer.state = 1,
      prod_n = 5;

  process Producer
    guardBlock
      temp bool t_5 = Producer.state == 0;
    guardCondition t_5;
    effect
      Producer.state = 1,
      prod_n = 6;

  process Producer
    guardBlock
      temp bool t_6 = Producer.state == 0;
    guardCondition t_6;
    effect
      Producer.state = 1,
      prod_n = 7;

  process Producer
    guardBlock
      temp bool t_7 = Producer.state == 0;
    guardCondition t_7;
    effect
      Producer.state = 1,
      prod_n = 8;

  process Producer
    guardBlock
      temp bool t_8 = Producer.state == 0;
    guardCondition t_8;
    effect
      Producer.state = 1,
      prod_n = 9;

  process Producer
    guardBlock
      temp bool t_9 = Producer.state == 0;
    guardCondition t_9;
    effect
      Producer.state = 1,
      prod_n = 10;

  process Producer
    guardBlock
      temp bool t_10 = Producer.state == 0;
    guardCondition t_10;
    effect
      Producer.state = 1,
      prod_n = 11;

  process Producer
    guardBlock
      temp bool t_11 = Producer.state == 0;
    guardCondition t_11;
    effect
      Producer.state = 1,
      prod_n = 12;

  process Producer
    guardBlock
      temp bool t_12 = Producer.state == 0;
    guardCondition t_12;
    effect
      Producer.state = 1,
      prod_n = 13;

  process Producer
    guardBlock
      temp bool t_13 = Producer.state == 0;
    guardCondition t_13;
    effect
      Producer.state = 1,
      prod_n = 14;

  process Producer
    guardBlock
      temp bool t_14 = Producer.state == 0;
    guardCondition t_14;
    effect
      Producer.state = 1,
      prod_n = 15;

  process Producer
    guardBlock
      temp bool t_15 = Producer.state == 0;
    guardCondition t_15;
    effect
      Producer.state = 1,
      prod_n = 16;

  process Producer
    guardBlock
      temp bool t_16 = Producer.state == 0;
    guardCondition t_16;
    effect
      Producer.state = 1,
      prod_n = 17;

  process Producer
    guardBlock
      temp bool t_17 = Producer.state == 0;
    guardCondition t_17;
    effect
      Producer.state = 1,
      prod_n = 18;

  process Producer
    guardBlock
      temp bool t_18 = Producer.state == 0;
    guardCondition t_18;
    effect
      Producer.state = 1,
      prod_n = 19;

  process Producer
    guardBlock
      temp bool t_19 = Producer.state == 0;
    guardCondition t_19;
    effect
      Producer.state = 1,
      prod_n = 20;

  process Producer
    guardBlock
      temp bool t_20 = Producer.state == 3,
      temp bool t_21 = Producer.result == 2,
      temp bool t_22 = Producer.result == 3,
      temp bool t_23 = t_21 or t_22,
      temp bool t_24 = t_20 and t_23;
    guardCondition t_24;
    effect
      Producer.state = 1;

  process Consumer
    guardBlock
      temp bool t_25 = Consumer.state == 1,
      temp bool t_26 = Consumer.m == 4,
      temp bool t_27 = Consumer.m == 5,
      temp bool t_28 = t_26 or t_27,
      temp bool t_29 = t_25 and t_28;
    guardCondition t_29;
    effect
      Consumer.state = 0;

  process Consumer
    guardBlock
      temp bool t_30 = Consumer.state == 1,
      temp bool t_31 = Consumer.m == 2,
      temp bool t_32 = t_30 and t_31;
    guardCondition t_32;
    effect
      Consumer.state = 0,
      Consumer.n = 0;

  process Consumer
    guardBlock
      temp bool t_33 = Consumer.state == 1,
      temp bool t_34 = Consumer.m == 1,
      temp bool t_35 = t_33 and t_34;
    guardCondition t_35;
    effect
      Consumer.state = 2;

  process Consumer
    guardBlock
      temp bool t_36 = Consumer.state == 2,
      temp bool t_37 = Consumer.n != prod_n,
      temp bool t_38 = t_36 and t_37;
    guardCondition t_38;
    effect
      Consumer.state = 3;

  process Sender
    guardBlock
      temp bool t_39 = Sender.state == 1;
    guardCondition t_39;
    effect
      Sender.state = 3,
      Sender.counter = 0;

  process Sender
    guardBlock
      temp bool t_40 = Sender.state == 4,
      temp bool t_41 = Sender.i < Sender.n,
      temp bool t_42 = t_40 and t_41;
    guardCondition t_42;
    effect
      Sender.state = 1,
      temp int t_43 = Sender.i + 1,
      Sender.i = t_43;

  process Receiver
    guardBlock
      temp bool t_44 = Receiver.state == 4;
    guardCondition t_44;
    effect
      Receiver.state = 2,
      temp byte t_45 = Receiver.value & 1,
      Receiver.exp_ab = t_45;

  process Receiver
    guardBlock
      temp bool t_46 = Receiver.state == 0,
      temp byte t_47 = Receiver.value & 2,
      temp bool t_48 = t_47 == 2,
      temp bool t_49 = t_46 and t_48;
    guardCondition t_49;
    effect
      Receiver.state = 5;

  process LTL_property
    guardBlock
      temp bool t_50 = LTL_property.state == 0;
    guardCondition t_50;
    effect
      LTL_property.state = 0;

  process LTL_property
    guardBlock
      temp bool t_51 = LTL_property.state == 0,
      temp bool t_52 = Producer.state == 2,
      temp bool t_53 = Producer.state == 0,
      temp bool t_54 = not t_53,
      temp bool t_55 = t_52 and t_54,
      temp bool t_56 = t_51 and t_55;
    guardCondition t_56;
    effect
      LTL_property.state = 1;

  process LTL_property
    guardBlock
      temp bool t_57 = LTL_property.state == 1,
      temp bool t_58 = Producer.state == 0,
      temp bool t_59 = not t_58,
      temp bool t_60 = t_57 and t_59;
    guardCondition t_60;
    effect
      LTL_property.state = 1;

  process Sender_Receiver
    guardBlock
      temp bool t_61 = Sender.state == 6,
      temp bool t_62 = Receiver.state == 5,
      temp bool t_63 = t_61 and t_62;
    guardCondition t_63;
    effect
      Sender.state = 0,
      Receiver.state = 1;

  process Sender_Receiver
    guardBlock
      temp bool t_64 = Sender.state == 6,
      temp bool t_65 = Receiver.state == 1,
      temp bool t_66 = t_64 and t_65;
    guardCondition t_66;
    effect
      Sender.state = 0,
      Receiver.state = 1;

  process K_Sender
    guardBlock
      temp bool t_67 = K.state == 1,
      temp bool t_68 = Sender.state == 2,
      temp bool t_69 = Sender.counter == 20,
      temp bool t_70 = t_68 and t_69,
      temp bool t_71 = t_67 and t_70;
    guardCondition t_71;
    effect
      K.state = 0,
      Sender.state = 5;

  process K_Sender
    guardBlock
      temp bool t_72 = K.state == 1,
      temp bool t_73 = Sender.state == 2,
      temp bool t_74 = Sender.counter < 20,
      temp bool t_75 = t_73 and t_74,
      temp bool t_76 = t_72 and t_75;
    guardCondition t_76;
    effect
      K.state = 0,
      Sender.state = 3,
      temp int t_77 = Sender.counter + 1,
      Sender.counter = t_77;

  process L_Sender
    guardBlock
      temp bool t_78 = L.state == 1,
      temp bool t_79 = Sender.state == 2,
      temp bool t_80 = Sender.counter == 20,
      temp bool t_81 = t_79 and t_80,
      temp bool t_82 = t_78 and t_81;
    guardCondition t_82;
    effect
      L.state = 0,
      Sender.state = 5;

  process L_Sender
    guardBlock
      temp bool t_83 = L.state == 1,
      temp bool t_84 = Sender.state == 2,
      temp bool t_85 = Sender.counter < 20,
      temp bool t_86 = t_84 and t_85,
      temp bool t_87 = t_83 and t_86;
    guardCondition t_87;
    effect
      L.state = 0,
      Sender.state = 3,
      temp int t_88 = Sender.counter + 1,
      Sender.counter = t_88;

  process Producer_Consumer
    guardBlock
      temp bool t_89 = Producer.state == 3,
      temp bool t_90 = Producer.result == 1,
      temp bool t_91 = t_89 and t_90,
      temp bool t_92 = Consumer.state == 2,
      temp bool t_93 = Consumer.n == prod_n,
      temp bool t_94 = t_92 and t_93,
      temp bool t_95 = t_91 and t_94;
    guardCondition t_95;
    effect
      Producer.state = 0,
      Consumer.state = 0;

  process K_Receiver
    guardBlock
      temp bool t_96 = K.state == 1,
      temp bool t_97 = Receiver.state == 1,
      temp bool t_98 = t_96 and t_97;
    guardCondition t_98;
    effect
      K.state = 0,
      Receiver.value = K.value,
      Receiver.state = 4;

  process K_Receiver
    guardBlock
      temp bool t_99 = K.state == 1,
      temp bool t_100 = Receiver.state == 0,
      temp bool t_101 = t_99 and t_100;
    guardCondition t_101;
    effect
      K.state = 0,
      Receiver.value = K.value,
      Receiver.state = 2;

  process Receiver_Consumer
    guardBlock
      temp bool t_102 = Receiver.state == 2,
      temp byte t_103 = Receiver.value & 1,
      temp bool t_104 = t_103 == Receiver.exp_ab,
      temp byte t_105 = Receiver.value & 2,
      temp bool t_106 = t_105 == 2,
      temp bool t_107 = t_104 and t_106,
      temp bool t_108 = t_102 and t_107,
      temp bool t_109 = Consumer.state == 0,
      temp bool t_110 = t_108 and t_109;
    guardCondition t_110;
    effect
      Receiver.state = 3,
      Consumer.m = 1,
      Consumer.state = 1,
      temp int t_111 = Consumer.n + 1,
      Consumer.n = t_111;

  process Receiver_Consumer
    guardBlock
      temp bool t_112 = Receiver.state == 2,
      temp byte t_113 = Receiver.value & 1,
      temp bool t_114 = t_113 == Receiver.exp_ab,
      temp byte t_115 = Receiver.value & 2,
      temp bool t_116 = t_115 == 0,
      temp bool t_117 = t_114 and t_116,
      temp byte t_118 = Receiver.value & 4,
      temp bool t_119 = t_118 == 0,
      temp bool t_120 = t_117 and t_119,
      temp bool t_121 = t_112 and t_120,
      temp bool t_122 = Consumer.state == 0,
      temp bool t_123 = t_121 and t_122;
    guardCondition t_123;
    effect
      Receiver.state = 3,
      Consumer.m = 5,
      Consumer.state = 1,
      temp int t_124 = Consumer.n + 1,
      Consumer.n = t_124;

  process Receiver_Consumer
    guardBlock
      temp bool t_125 = Receiver.state == 2,
      temp byte t_126 = Receiver.value & 1,
      temp bool t_127 = t_126 == Receiver.exp_ab,
      temp byte t_128 = Receiver.value & 2,
      temp bool t_129 = t_128 == 0,
      temp bool t_130 = t_127 and t_129,
      temp byte t_131 = Receiver.value & 4,
      temp bool t_132 = t_131 == 4,
      temp bool t_133 = t_130 and t_132,
      temp bool t_134 = t_125 and t_133,
      temp bool t_135 = Consumer.state == 0,
      temp bool t_136 = t_134 and t_135;
    guardCondition t_136;
    effect
      Receiver.state = 3,
      Consumer.m = 4,
      Consumer.state = 1,
      temp int t_137 = Consumer.n + 1,
      Consumer.n = t_137;

  process Receiver_Consumer
    guardBlock
      temp bool t_138 = Receiver.state == 0,
      temp bool t_139 = Consumer.state == 0,
      temp bool t_140 = t_138 and t_139;
    guardCondition t_140;
    effect
      Receiver.state = 5,
      Consumer.m = 2,
      Consumer.state = 1,
      temp int t_141 = Consumer.n + 1,
      Consumer.n = t_141;

  process Sender_K
    guardBlock
      temp bool t_142 = Sender.state == 3,
      temp bool t_143 = Sender.i == 1,
      temp bool t_144 = Sender.i == Sender.n,
      temp bool t_145 = t_143 and t_144,
      temp bool t_146 = t_142 and t_145,
      temp bool t_147 = K.state == 0,
      temp bool t_148 = t_146 and t_147;
    guardCondition t_148;
    effect
      Sender.state = 2,
      temp int t_149 = 6 + Sender.ab,
      K.value = t_149,
      K.state = 1;

  process Sender_K
    guardBlock
      temp bool t_150 = Sender.state == 3,
      temp bool t_151 = Sender.i > 1,
      temp bool t_152 = Sender.i == Sender.n,
      temp bool t_153 = t_151 and t_152,
      temp bool t_154 = t_150 and t_153,
      temp bool t_155 = K.state == 0,
      temp bool t_156 = t_154 and t_155;
    guardCondition t_156;
    effect
      Sender.state = 2,
      temp int t_157 = 2 + Sender.ab,
      K.value = t_157,
      K.state = 1;

  process Sender_K
    guardBlock
      temp bool t_158 = Sender.state == 3,
      temp bool t_159 = Sender.i == 1,
      temp bool t_160 = Sender.i < Sender.n,
      temp bool t_161 = t_159 and t_160,
      temp bool t_162 = t_158 and t_161,
      temp bool t_163 = K.state == 0,
      temp bool t_164 = t_162 and t_163;
    guardCondition t_164;
    effect
      Sender.state = 2,
      temp int t_165 = 4 + Sender.ab,
      K.value = t_165,
      K.state = 1;

  process Sender_K
    guardBlock
      temp bool t_166 = Sender.state == 3,
      temp bool t_167 = Sender.i > 1,
      temp bool t_168 = Sender.i < Sender.n,
      temp bool t_169 = t_167 and t_168,
      temp bool t_170 = t_166 and t_169,
      temp bool t_171 = K.state == 0,
      temp bool t_172 = t_170 and t_171;
    guardCondition t_172;
    effect
      Sender.state = 2,
      K.value = Sender.ab,
      K.state = 1;

  process L_Sender
    guardBlock
      temp bool t_173 = L.state == 1,
      temp bool t_174 = Sender.state == 2,
      temp bool t_175 = t_173 and t_174;
    guardCondition t_175;
    effect
      L.state = 0,
      Sender.state = 4,
      temp int t_176 = 1 - Sender.ab,
      Sender.ab = t_176;

  process Receiver_L
    guardBlock
      temp bool t_177 = Receiver.state == 2,
      temp byte t_178 = Receiver.value & 1,
      temp bool t_179 = Receiver.exp_ab != t_178,
      temp bool t_180 = t_177 and t_179,
      temp bool t_181 = L.state == 0,
      temp bool t_182 = t_180 and t_181;
    guardCondition t_182;
    effect
      Receiver.state = 0,
      L.state = 1;

  process Receiver_L
    guardBlock
      temp bool t_183 = Receiver.state == 3,
      temp bool t_184 = L.state == 0,
      temp bool t_185 = t_183 and t_184;
    guardCondition t_185;
    effect
      Receiver.state = 0,
      temp int t_186 = 1 - Receiver.exp_ab,
      Receiver.exp_ab = t_186,
      L.state = 1;

  process Producer_Sender
    guardBlock
      temp bool t_187 = Producer.state == 1,
      temp bool t_188 = Sender.state == 0,
      temp bool t_189 = t_187 and t_188;
    guardCondition t_189;
    effect
      Producer.state = 2,
      Sender.n = prod_n,
      Sender.state = 1,
      Sender.i = 1;

  process Sender_Producer
    guardBlock
      temp bool t_190 = Sender.state == 4,
      temp bool t_191 = Sender.i == Sender.n,
      temp bool t_192 = t_190 and t_191,
      temp bool t_193 = Producer.state == 2,
      temp bool t_194 = t_192 and t_193;
    guardCondition t_194;
    effect
      Sender.state = 6,
      Producer.result = 1,
      Producer.state = 3;

  process Sender_Producer
    guardBlock
      temp bool t_195 = Sender.state == 5,
      temp bool t_196 = Sender.i < Sender.n,
      temp bool t_197 = t_195 and t_196,
      temp bool t_198 = Producer.state == 2,
      temp bool t_199 = t_197 and t_198;
    guardCondition t_199;
    effect
      Sender.state = 6,
      Producer.result = 2,
      Producer.state = 3;

  process Sender_Producer
    guardBlock
      temp bool t_200 = Sender.state == 5,
      temp bool t_201 = Sender.i == Sender.n,
      temp bool t_202 = t_200 and t_201,
      temp bool t_203 = Producer.state == 2,
      temp bool t_204 = t_202 and t_203;
    guardCondition t_204;
    effect
      Sender.state = 6,
      Producer.result = 3,
      Producer.state = 3;
      accepting conditions
      LTL_property.state == 1
       
