state {ready(0), start_send(1), wait_result(2), check(3)} Producer.state = 0;
state {ready(0), get_msg(1), check(2), st_error(3)} Consumer.state = 0;
state {idle(0), next_frame(1), wait_ack(2), send(3), success(4), q_error(5), ret(6)} Sender.state = 0;
state {idle(0), new_file(1), frame_received(2), frame_reported(3), first_safe(4), ret(5)} Receiver.state = 1;
state {ready(0), got_msg(1)} K.state = 0;
state {ready(0), got_msg(1)} L.state = 0;
state {q1(0), q2(1)} LTL_property.state = 0;
byte prod_n = 0;
byte Producer.result = 0;
byte Producer.n = 0;
byte Consumer.m = 0;
byte Consumer.n = 0;
byte Sender.ab = 0;
byte Sender.n = 0;
byte Sender.i = 0;
byte Sender.counter = 0;
byte Receiver.value = 0;
byte Receiver.exp_ab = 0;
byte K.value = 0;

  process Producer 
    guardBlock
      temp bool t_0 = Producer.state == 0;

    guardCondition t_0;
    effect
      Producer.state = 1,
      prod_n = 1;

  process Producer 
    guardBlock
      temp bool t_1 = Producer.state == 0;

    guardCondition t_1;
    effect
      Producer.state = 1,
      prod_n = 2;

  process Producer 
    guardBlock
      temp bool t_2 = Producer.state == 0;

    guardCondition t_2;
    effect
      Producer.state = 1,
      prod_n = 3;

  process Producer 
    guardBlock
      temp bool t_3 = Producer.state == 0;

    guardCondition t_3;
    effect
      Producer.state = 1,
      prod_n = 4;

  process Producer 
    guardBlock
      temp bool t_4 = Producer.state == 0;

    guardCondition t_4;
    effect
      Producer.state = 1,
      prod_n = 5;

  process Producer 
    guardBlock
      temp bool t_5 = Producer.state == 0;

    guardCondition t_5;
    effect
      Producer.state = 1,
      prod_n = 6;

  process Producer 
    guardBlock
      temp bool t_6 = Producer.state == 0;

    guardCondition t_6;
    effect
      Producer.state = 1,
      prod_n = 7;

  process Producer 
    guardBlock
      temp bool t_7 = Producer.state == 0;

    guardCondition t_7;
    effect
      Producer.state = 1,
      prod_n = 8;

  process Producer 
    guardBlock
      temp bool t_8 = Producer.state == 0;

    guardCondition t_8;
    effect
      Producer.state = 1,
      prod_n = 9;

  process Producer 
    guardBlock
      temp bool t_9 = Producer.state == 0;

    guardCondition t_9;
    effect
      Producer.state = 1,
      prod_n = 10;

  process Producer 
    guardBlock
      temp bool t_10 = Producer.state == 0;

    guardCondition t_10;
    effect
      Producer.state = 1,
      prod_n = 11;

  process Producer 
    guardBlock
      temp bool t_11 = Producer.state == 0;

    guardCondition t_11;
    effect
      Producer.state = 1,
      prod_n = 12;

  process Producer 
    guardBlock
      temp bool t_12 = Producer.state == 0;

    guardCondition t_12;
    effect
      Producer.state = 1,
      prod_n = 13;

  process Producer 
    guardBlock
      temp bool t_13 = Producer.state == 0;

    guardCondition t_13;
    effect
      Producer.state = 1,
      prod_n = 14;

  process Producer 
    guardBlock
      temp bool t_14 = Producer.state == 0;

    guardCondition t_14;
    effect
      Producer.state = 1,
      prod_n = 15;

  process Producer 
    guardBlock
      temp bool t_15 = Producer.state == 0;

    guardCondition t_15;
    effect
      Producer.state = 1,
      prod_n = 16;

  process Producer 
    guardBlock
      temp bool t_16 = Producer.state == 0;

    guardCondition t_16;
    effect
      Producer.state = 1,
      prod_n = 17;

  process Producer 
    guardBlock
      temp bool t_17 = Producer.state == 0;

    guardCondition t_17;
    effect
      Producer.state = 1,
      prod_n = 18;

  process Producer 
    guardBlock
      temp bool t_18 = Producer.state == 0;

    guardCondition t_18;
    effect
      Producer.state = 1,
      prod_n = 19;

  process Producer 
    guardBlock
      temp bool t_19 = Producer.state == 0;

    guardCondition t_19;
    effect
      Producer.state = 1,
      prod_n = 20;

  process Producer 
    guardBlock
      temp bool t_20 = Producer.state == 3,
      temp bool t_21 = Producer.result == 2,
      temp bool t_22 = Producer.result == 3,
      temp bool t_23 = t_21 or t_22,
      temp bool t_24 = t_20 and t_23;

    guardCondition t_24;
    effect
      Producer.state = 1;

  process Consumer 
    guardBlock
      temp bool t_25 = Consumer.state == 1,
      temp bool t_26 = Consumer.m == 4,
      temp bool t_27 = Consumer.m == 5,
      temp bool t_28 = t_26 or t_27,
      temp bool t_29 = t_25 and t_28;

    guardCondition t_29;
    effect
      Consumer.state = 0;

  process Consumer 
    guardBlock
      temp bool t_30 = Consumer.state == 1,
      temp bool t_31 = Consumer.m == 2,
      temp bool t_32 = t_30 and t_31;

    guardCondition t_32;
    effect
      Consumer.state = 0,
      Consumer.n = 0;

  process Consumer 
    guardBlock
      temp bool t_33 = Consumer.state == 1,
      temp bool t_34 = Consumer.m == 1,
      temp bool t_35 = t_33 and t_34;

    guardCondition t_35;
    effect
      Consumer.state = 2;

  process Consumer 
    guardBlock
      temp bool t_36 = Consumer.state == 2,
      temp bool t_37 = Consumer.n != prod_n,
      temp bool t_38 = t_36 and t_37;

    guardCondition t_38;
    effect
      Consumer.state = 3;

  process Sender 
    guardBlock
      temp bool t_39 = Sender.state == 1;

    guardCondition t_39;
    effect
      Sender.state = 3,
      Sender.counter = 0;

  process Sender 
    guardBlock
      temp bool t_40 = Sender.state == 4,
      temp bool t_41 = Sender.i < Sender.n,
      temp bool t_42 = t_40 and t_41;

    guardCondition t_42;
    effect
      Sender.state = 1,
      temp byte t_43 = Sender.i + 1,
      Sender.i = t_43;

  process Receiver 
    guardBlock
      temp bool t_44 = Receiver.state == 4;

    guardCondition t_44;
    effect
      Receiver.state = 2,
      temp byte t_45 = Receiver.value & 1,
      Receiver.exp_ab = t_45;

  process Receiver 
    guardBlock
      temp bool t_46 = Receiver.state == 0,
      temp byte t_47 = Receiver.value & 2,
      temp bool t_48 = t_47 == 2,
      temp bool t_49 = t_46 and t_48;

    guardCondition t_49;
    effect
      Receiver.state = 5;

  process LTL_property 
    guardBlock
      temp bool t_50 = LTL_property.state == 0;

    guardCondition t_50;
    effect
      LTL_property.state = 0;

  process LTL_property 
    guardBlock
      temp bool t_51 = LTL_property.state == 0,
      temp bool t_52 = Producer.state == 2,
      temp bool t_53 = Producer.state == 0,
      temp bool t_54 = not t_53,
      temp bool t_55 = t_52 and t_54,
      temp bool t_56 = t_51 and t_55;

    guardCondition t_56;
    effect
      LTL_property.state = 1;

  process LTL_property 
    guardBlock
      temp bool t_57 = LTL_property.state == 1,
      temp bool t_58 = Producer.state == 0,
      temp bool t_59 = not t_58,
      temp bool t_60 = t_57 and t_59;

    guardCondition t_60;
    effect
      LTL_property.state = 1;

  process Producer_Sender 
    guardBlock
      temp bool t_61 = Producer.state == 1,
      temp bool t_62 = Sender.state == 0,
      temp bool t_63 = t_61 and t_62;

    guardCondition t_63;
    effect
      Producer.state = 2,
      Sender.n = prod_n,
      Sender.state = 1,
      Sender.i = 1;

  process Receiver_Consumer 
    guardBlock
      temp bool t_64 = Receiver.state == 2,
      temp byte t_65 = Receiver.value & 1,
      temp bool t_66 = t_65 == Receiver.exp_ab,
      temp byte t_67 = Receiver.value & 2,
      temp bool t_68 = t_67 == 2,
      temp bool t_69 = t_66 and t_68,
      temp bool t_70 = t_64 and t_69,
      temp bool t_71 = Consumer.state == 0,
      temp bool t_72 = t_70 and t_71;

    guardCondition t_72;
    effect
      Receiver.state = 3,
      Consumer.m = 1,
      Consumer.state = 1,
      temp byte t_73 = Consumer.n + 1,
      Consumer.n = t_73;

  process Receiver_Consumer 
    guardBlock
      temp bool t_74 = Receiver.state == 2,
      temp byte t_75 = Receiver.value & 1,
      temp bool t_76 = t_75 == Receiver.exp_ab,
      temp byte t_77 = Receiver.value & 2,
      temp bool t_78 = t_77 == 0,
      temp bool t_79 = t_76 and t_78,
      temp byte t_80 = Receiver.value & 4,
      temp bool t_81 = t_80 == 0,
      temp bool t_82 = t_79 and t_81,
      temp bool t_83 = t_74 and t_82,
      temp bool t_84 = Consumer.state == 0,
      temp bool t_85 = t_83 and t_84;

    guardCondition t_85;
    effect
      Receiver.state = 3,
      Consumer.m = 5,
      Consumer.state = 1,
      temp byte t_86 = Consumer.n + 1,
      Consumer.n = t_86;

  process Receiver_Consumer 
    guardBlock
      temp bool t_87 = Receiver.state == 2,
      temp byte t_88 = Receiver.value & 1,
      temp bool t_89 = t_88 == Receiver.exp_ab,
      temp byte t_90 = Receiver.value & 2,
      temp bool t_91 = t_90 == 0,
      temp bool t_92 = t_89 and t_91,
      temp byte t_93 = Receiver.value & 4,
      temp bool t_94 = t_93 == 4,
      temp bool t_95 = t_92 and t_94,
      temp bool t_96 = t_87 and t_95,
      temp bool t_97 = Consumer.state == 0,
      temp bool t_98 = t_96 and t_97;

    guardCondition t_98;
    effect
      Receiver.state = 3,
      Consumer.m = 4,
      Consumer.state = 1,
      temp byte t_99 = Consumer.n + 1,
      Consumer.n = t_99;

  process Receiver_Consumer 
    guardBlock
      temp bool t_100 = Receiver.state == 0,
      temp bool t_101 = Consumer.state == 0,
      temp bool t_102 = t_100 and t_101;

    guardCondition t_102;
    effect
      Receiver.state = 5,
      Consumer.m = 2,
      Consumer.state = 1,
      temp byte t_103 = Consumer.n + 1,
      Consumer.n = t_103;

  process L_Sender 
    guardBlock
      temp bool t_104 = L.state == 1,
      temp bool t_105 = Sender.state == 2,
      temp bool t_106 = t_104 and t_105;

    guardCondition t_106;
    effect
      L.state = 0,
      Sender.state = 4,
      temp byte t_107 = 1 - Sender.ab,
      Sender.ab = t_107;

  process Sender_Producer 
    guardBlock
      temp bool t_108 = Sender.state == 4,
      temp bool t_109 = Sender.i == Sender.n,
      temp bool t_110 = t_108 and t_109,
      temp bool t_111 = Producer.state == 2,
      temp bool t_112 = t_110 and t_111;

    guardCondition t_112;
    effect
      Sender.state = 6,
      Producer.result = 1,
      Producer.state = 3;

  process Sender_Producer 
    guardBlock
      temp bool t_113 = Sender.state == 5,
      temp bool t_114 = Sender.i < Sender.n,
      temp bool t_115 = t_113 and t_114,
      temp bool t_116 = Producer.state == 2,
      temp bool t_117 = t_115 and t_116;

    guardCondition t_117;
    effect
      Sender.state = 6,
      Producer.result = 2,
      Producer.state = 3;

  process Sender_Producer 
    guardBlock
      temp bool t_118 = Sender.state == 5,
      temp bool t_119 = Sender.i == Sender.n,
      temp bool t_120 = t_118 and t_119,
      temp bool t_121 = Producer.state == 2,
      temp bool t_122 = t_120 and t_121;

    guardCondition t_122;
    effect
      Sender.state = 6,
      Producer.result = 3,
      Producer.state = 3;

  process K_Sender 
    guardBlock
      temp bool t_123 = K.state == 1,
      temp bool t_124 = Sender.state == 2,
      temp bool t_125 = Sender.counter == 30,
      temp bool t_126 = t_124 and t_125,
      temp bool t_127 = t_123 and t_126;

    guardCondition t_127;
    effect
      K.state = 0,
      Sender.state = 5;

  process K_Sender 
    guardBlock
      temp bool t_128 = K.state == 1,
      temp bool t_129 = Sender.state == 2,
      temp bool t_130 = Sender.counter < 30,
      temp bool t_131 = t_129 and t_130,
      temp bool t_132 = t_128 and t_131;

    guardCondition t_132;
    effect
      K.state = 0,
      Sender.state = 3,
      temp byte t_133 = Sender.counter + 1,
      Sender.counter = t_133;

  process L_Sender 
    guardBlock
      temp bool t_134 = L.state == 1,
      temp bool t_135 = Sender.state == 2,
      temp bool t_136 = Sender.counter == 30,
      temp bool t_137 = t_135 and t_136,
      temp bool t_138 = t_134 and t_137;

    guardCondition t_138;
    effect
      L.state = 0,
      Sender.state = 5;

  process L_Sender 
    guardBlock
      temp bool t_139 = L.state == 1,
      temp bool t_140 = Sender.state == 2,
      temp bool t_141 = Sender.counter < 30,
      temp bool t_142 = t_140 and t_141,
      temp bool t_143 = t_139 and t_142;

    guardCondition t_143;
    effect
      L.state = 0,
      Sender.state = 3,
      temp byte t_144 = Sender.counter + 1,
      Sender.counter = t_144;

  process Producer_Consumer 
    guardBlock
      temp bool t_145 = Producer.state == 3,
      temp bool t_146 = Producer.result == 1,
      temp bool t_147 = t_145 and t_146,
      temp bool t_148 = Consumer.state == 2,
      temp bool t_149 = Consumer.n == prod_n,
      temp bool t_150 = t_148 and t_149,
      temp bool t_151 = t_147 and t_150;

    guardCondition t_151;
    effect
      Producer.state = 0,
      Consumer.state = 0;

  process Sender_K 
    guardBlock
      temp bool t_152 = Sender.state == 3,
      temp bool t_153 = Sender.i == 1,
      temp bool t_154 = Sender.i == Sender.n,
      temp bool t_155 = t_153 and t_154,
      temp bool t_156 = t_152 and t_155,
      temp bool t_157 = K.state == 0,
      temp bool t_158 = t_156 and t_157;

    guardCondition t_158;
    effect
      Sender.state = 2,
      temp byte t_159 = 6 + Sender.ab,
      K.value = t_159,
      K.state = 1;

  process Sender_K 
    guardBlock
      temp bool t_160 = Sender.state == 3,
      temp bool t_161 = Sender.i > 1,
      temp bool t_162 = Sender.i == Sender.n,
      temp bool t_163 = t_161 and t_162,
      temp bool t_164 = t_160 and t_163,
      temp bool t_165 = K.state == 0,
      temp bool t_166 = t_164 and t_165;

    guardCondition t_166;
    effect
      Sender.state = 2,
      temp byte t_167 = 2 + Sender.ab,
      K.value = t_167,
      K.state = 1;

  process Sender_K 
    guardBlock
      temp bool t_168 = Sender.state == 3,
      temp bool t_169 = Sender.i == 1,
      temp bool t_170 = Sender.i < Sender.n,
      temp bool t_171 = t_169 and t_170,
      temp bool t_172 = t_168 and t_171,
      temp bool t_173 = K.state == 0,
      temp bool t_174 = t_172 and t_173;

    guardCondition t_174;
    effect
      Sender.state = 2,
      temp byte t_175 = 4 + Sender.ab,
      K.value = t_175,
      K.state = 1;

  process Sender_K 
    guardBlock
      temp bool t_176 = Sender.state == 3,
      temp bool t_177 = Sender.i > 1,
      temp bool t_178 = Sender.i < Sender.n,
      temp bool t_179 = t_177 and t_178,
      temp bool t_180 = t_176 and t_179,
      temp bool t_181 = K.state == 0,
      temp bool t_182 = t_180 and t_181;

    guardCondition t_182;
    effect
      Sender.state = 2,
      K.value = Sender.ab,
      K.state = 1;

  process Sender_Receiver 
    guardBlock
      temp bool t_183 = Sender.state == 6,
      temp bool t_184 = Receiver.state == 5,
      temp bool t_185 = t_183 and t_184;

    guardCondition t_185;
    effect
      Sender.state = 0,
      Receiver.state = 1;

  process Sender_Receiver 
    guardBlock
      temp bool t_186 = Sender.state == 6,
      temp bool t_187 = Receiver.state == 1,
      temp bool t_188 = t_186 and t_187;

    guardCondition t_188;
    effect
      Sender.state = 0,
      Receiver.state = 1;

  process Receiver_L 
    guardBlock
      temp bool t_189 = Receiver.state == 2,
      temp byte t_190 = Receiver.value & 1,
      temp bool t_191 = Receiver.exp_ab != t_190,
      temp bool t_192 = t_189 and t_191,
      temp bool t_193 = L.state == 0,
      temp bool t_194 = t_192 and t_193;

    guardCondition t_194;
    effect
      Receiver.state = 0,
      L.state = 1;

  process Receiver_L 
    guardBlock
      temp bool t_195 = Receiver.state == 3,
      temp bool t_196 = L.state == 0,
      temp bool t_197 = t_195 and t_196;

    guardCondition t_197;
    effect
      Receiver.state = 0,
      temp byte t_198 = 1 - Receiver.exp_ab,
      Receiver.exp_ab = t_198,
      L.state = 1;

  process K_Receiver 
    guardBlock
      temp bool t_199 = K.state == 1,
      temp bool t_200 = Receiver.state == 1,
      temp bool t_201 = t_199 and t_200;

    guardCondition t_201;
    effect
      K.state = 0,
      Receiver.value = K.value,
      Receiver.state = 4;

  process K_Receiver 
    guardBlock
      temp bool t_202 = K.state == 1,
      temp bool t_203 = Receiver.state == 0,
      temp bool t_204 = t_202 and t_203;

    guardCondition t_204;
    effect
      K.state = 0,
      Receiver.value = K.value,
      Receiver.state = 2;

accepting conditions
  LTL_property.state == 1

