state {ready(0), start_send(1), wait_result(2), check(3)} Producer.state = 0;
state {ready(0), get_msg(1), check(2), st_error(3)} Consumer.state = 0;
state {idle(0), next_frame(1), wait_ack(2), send(3), success(4), q_error(5), ret(6)} Sender.state = 0;
state {idle(0), new_file(1), frame_received(2), frame_reported(3), first_safe(4), ret(5)} Receiver.state = 1;
state {ready(0), got_msg(1)} K.state = 0;
state {ready(0), got_msg(1)} L.state = 0;
byte prod_n = 0;
byte Producer.result = 0;
byte Producer.n = 0;
byte Consumer.m = 0;
byte Consumer.n = 0;
byte Sender.ab = 0;
byte Sender.n = 0;
byte Sender.i = 0;
byte Sender.counter = 0;
byte Receiver.value = 0;
byte Receiver.exp_ab = 0;
byte K.value = 0;

  process Producer 
    guardBlock
      temp bool t_0 = Producer.state == 0;

    guardCondition t_0;
    effect
      Producer.state = 1,
      prod_n = 1;

  process Producer 
    guardBlock
      temp bool t_1 = Producer.state == 0;

    guardCondition t_1;
    effect
      Producer.state = 1,
      prod_n = 2;

  process Producer 
    guardBlock
      temp bool t_2 = Producer.state == 0;

    guardCondition t_2;
    effect
      Producer.state = 1,
      prod_n = 3;

  process Producer 
    guardBlock
      temp bool t_3 = Producer.state == 3,
      temp bool t_4 = Producer.result == 2,
      temp bool t_5 = Producer.result == 3,
      temp bool t_6 = t_4 or t_5,
      temp bool t_7 = t_3 and t_6;

    guardCondition t_7;
    effect
      Producer.state = 1;

  process Consumer 
    guardBlock
      temp bool t_8 = Consumer.state == 1,
      temp bool t_9 = Consumer.m == 4,
      temp bool t_10 = Consumer.m == 5,
      temp bool t_11 = t_9 or t_10,
      temp bool t_12 = t_8 and t_11;

    guardCondition t_12;
    effect
      Consumer.state = 0;

  process Consumer 
    guardBlock
      temp bool t_13 = Consumer.state == 1,
      temp bool t_14 = Consumer.m == 2,
      temp bool t_15 = t_13 and t_14;

    guardCondition t_15;
    effect
      Consumer.state = 0,
      Consumer.n = 0;

  process Consumer 
    guardBlock
      temp bool t_16 = Consumer.state == 1,
      temp bool t_17 = Consumer.m == 1,
      temp bool t_18 = t_16 and t_17;

    guardCondition t_18;
    effect
      Consumer.state = 2;

  process Consumer 
    guardBlock
      temp bool t_19 = Consumer.state == 2,
      temp bool t_20 = Consumer.n != prod_n,
      temp bool t_21 = t_19 and t_20;

    guardCondition t_21;
    effect
      Consumer.state = 3;

  process Sender 
    guardBlock
      temp bool t_22 = Sender.state == 1;

    guardCondition t_22;
    effect
      Sender.state = 3,
      Sender.counter = 0;

  process Sender 
    guardBlock
      temp bool t_23 = Sender.state == 4,
      temp bool t_24 = Sender.i < Sender.n,
      temp bool t_25 = t_23 and t_24;

    guardCondition t_25;
    effect
      Sender.state = 1,
      temp byte t_26 = Sender.i + 1,
      Sender.i = t_26;

  process Receiver 
    guardBlock
      temp bool t_27 = Receiver.state == 4;

    guardCondition t_27;
    effect
      Receiver.state = 2,
      temp byte t_28 = Receiver.value & 1,
      Receiver.exp_ab = t_28;

  process Receiver 
    guardBlock
      temp bool t_29 = Receiver.state == 0,
      temp byte t_30 = Receiver.value & 2,
      temp bool t_31 = t_30 == 2,
      temp bool t_32 = t_29 and t_31;

    guardCondition t_32;
    effect
      Receiver.state = 5;

  process Producer_Consumer 
    guardBlock
      temp bool t_33 = Producer.state == 3,
      temp bool t_34 = Producer.result == 1,
      temp bool t_35 = t_33 and t_34,
      temp bool t_36 = Consumer.state == 2,
      temp bool t_37 = Consumer.n == prod_n,
      temp bool t_38 = t_36 and t_37,
      temp bool t_39 = t_35 and t_38;

    guardCondition t_39;
    effect
      Producer.state = 0,
      Consumer.state = 0;

  process L_Sender 
    guardBlock
      temp bool t_40 = L.state == 1,
      temp bool t_41 = Sender.state == 2,
      temp bool t_42 = t_40 and t_41;

    guardCondition t_42;
    effect
      L.state = 0,
      Sender.state = 4,
      temp byte t_43 = 1 - Sender.ab,
      Sender.ab = t_43;

  process K_Receiver 
    guardBlock
      temp bool t_44 = K.state == 1,
      temp bool t_45 = Receiver.state == 1,
      temp bool t_46 = t_44 and t_45;

    guardCondition t_46;
    effect
      K.state = 0,
      Receiver.value = K.value,
      Receiver.state = 4;

  process K_Receiver 
    guardBlock
      temp bool t_47 = K.state == 1,
      temp bool t_48 = Receiver.state == 0,
      temp bool t_49 = t_47 and t_48;

    guardCondition t_49;
    effect
      K.state = 0,
      Receiver.value = K.value,
      Receiver.state = 2;

  process Receiver_L 
    guardBlock
      temp bool t_50 = Receiver.state == 2,
      temp byte t_51 = Receiver.value & 1,
      temp bool t_52 = Receiver.exp_ab != t_51,
      temp bool t_53 = t_50 and t_52,
      temp bool t_54 = L.state == 0,
      temp bool t_55 = t_53 and t_54;

    guardCondition t_55;
    effect
      Receiver.state = 0,
      L.state = 1;

  process Receiver_L 
    guardBlock
      temp bool t_56 = Receiver.state == 3,
      temp bool t_57 = L.state == 0,
      temp bool t_58 = t_56 and t_57;

    guardCondition t_58;
    effect
      Receiver.state = 0,
      temp byte t_59 = 1 - Receiver.exp_ab,
      Receiver.exp_ab = t_59,
      L.state = 1;

  process Sender_Receiver 
    guardBlock
      temp bool t_60 = Sender.state == 6,
      temp bool t_61 = Receiver.state == 5,
      temp bool t_62 = t_60 and t_61;

    guardCondition t_62;
    effect
      Sender.state = 0,
      Receiver.state = 1;

  process Sender_Receiver 
    guardBlock
      temp bool t_63 = Sender.state == 6,
      temp bool t_64 = Receiver.state == 1,
      temp bool t_65 = t_63 and t_64;

    guardCondition t_65;
    effect
      Sender.state = 0,
      Receiver.state = 1;

  process Receiver_Consumer 
    guardBlock
      temp bool t_66 = Receiver.state == 2,
      temp byte t_67 = Receiver.value & 1,
      temp bool t_68 = t_67 == Receiver.exp_ab,
      temp byte t_69 = Receiver.value & 2,
      temp bool t_70 = t_69 == 2,
      temp bool t_71 = t_68 and t_70,
      temp bool t_72 = t_66 and t_71,
      temp bool t_73 = Consumer.state == 0,
      temp bool t_74 = t_72 and t_73;

    guardCondition t_74;
    effect
      Receiver.state = 3,
      Consumer.m = 1,
      Consumer.state = 1,
      temp byte t_75 = Consumer.n + 1,
      Consumer.n = t_75;

  process Receiver_Consumer 
    guardBlock
      temp bool t_76 = Receiver.state == 2,
      temp byte t_77 = Receiver.value & 1,
      temp bool t_78 = t_77 == Receiver.exp_ab,
      temp byte t_79 = Receiver.value & 2,
      temp bool t_80 = t_79 == 0,
      temp bool t_81 = t_78 and t_80,
      temp byte t_82 = Receiver.value & 4,
      temp bool t_83 = t_82 == 0,
      temp bool t_84 = t_81 and t_83,
      temp bool t_85 = t_76 and t_84,
      temp bool t_86 = Consumer.state == 0,
      temp bool t_87 = t_85 and t_86;

    guardCondition t_87;
    effect
      Receiver.state = 3,
      Consumer.m = 5,
      Consumer.state = 1,
      temp byte t_88 = Consumer.n + 1,
      Consumer.n = t_88;

  process Receiver_Consumer 
    guardBlock
      temp bool t_89 = Receiver.state == 2,
      temp byte t_90 = Receiver.value & 1,
      temp bool t_91 = t_90 == Receiver.exp_ab,
      temp byte t_92 = Receiver.value & 2,
      temp bool t_93 = t_92 == 0,
      temp bool t_94 = t_91 and t_93,
      temp byte t_95 = Receiver.value & 4,
      temp bool t_96 = t_95 == 4,
      temp bool t_97 = t_94 and t_96,
      temp bool t_98 = t_89 and t_97,
      temp bool t_99 = Consumer.state == 0,
      temp bool t_100 = t_98 and t_99;

    guardCondition t_100;
    effect
      Receiver.state = 3,
      Consumer.m = 4,
      Consumer.state = 1,
      temp byte t_101 = Consumer.n + 1,
      Consumer.n = t_101;

  process Receiver_Consumer 
    guardBlock
      temp bool t_102 = Receiver.state == 0,
      temp bool t_103 = Consumer.state == 0,
      temp bool t_104 = t_102 and t_103;

    guardCondition t_104;
    effect
      Receiver.state = 5,
      Consumer.m = 2,
      Consumer.state = 1,
      temp byte t_105 = Consumer.n + 1,
      Consumer.n = t_105;

  process K_Sender 
    guardBlock
      temp bool t_106 = K.state == 1,
      temp bool t_107 = Sender.state == 2,
      temp bool t_108 = Sender.counter == 5,
      temp bool t_109 = t_107 and t_108,
      temp bool t_110 = t_106 and t_109;

    guardCondition t_110;
    effect
      K.state = 0,
      Sender.state = 5;

  process K_Sender 
    guardBlock
      temp bool t_111 = K.state == 1,
      temp bool t_112 = Sender.state == 2,
      temp bool t_113 = Sender.counter < 5,
      temp bool t_114 = t_112 and t_113,
      temp bool t_115 = t_111 and t_114;

    guardCondition t_115;
    effect
      K.state = 0,
      Sender.state = 3,
      temp byte t_116 = Sender.counter + 1,
      Sender.counter = t_116;

  process L_Sender 
    guardBlock
      temp bool t_117 = L.state == 1,
      temp bool t_118 = Sender.state == 2,
      temp bool t_119 = Sender.counter == 5,
      temp bool t_120 = t_118 and t_119,
      temp bool t_121 = t_117 and t_120;

    guardCondition t_121;
    effect
      L.state = 0,
      Sender.state = 5;

  process L_Sender 
    guardBlock
      temp bool t_122 = L.state == 1,
      temp bool t_123 = Sender.state == 2,
      temp bool t_124 = Sender.counter < 5,
      temp bool t_125 = t_123 and t_124,
      temp bool t_126 = t_122 and t_125;

    guardCondition t_126;
    effect
      L.state = 0,
      Sender.state = 3,
      temp byte t_127 = Sender.counter + 1,
      Sender.counter = t_127;

  process Sender_Producer 
    guardBlock
      temp bool t_128 = Sender.state == 4,
      temp bool t_129 = Sender.i == Sender.n,
      temp bool t_130 = t_128 and t_129,
      temp bool t_131 = Producer.state == 2,
      temp bool t_132 = t_130 and t_131;

    guardCondition t_132;
    effect
      Sender.state = 6,
      Producer.result = 1,
      Producer.state = 3;

  process Sender_Producer 
    guardBlock
      temp bool t_133 = Sender.state == 5,
      temp bool t_134 = Sender.i < Sender.n,
      temp bool t_135 = t_133 and t_134,
      temp bool t_136 = Producer.state == 2,
      temp bool t_137 = t_135 and t_136;

    guardCondition t_137;
    effect
      Sender.state = 6,
      Producer.result = 2,
      Producer.state = 3;

  process Sender_Producer 
    guardBlock
      temp bool t_138 = Sender.state == 5,
      temp bool t_139 = Sender.i == Sender.n,
      temp bool t_140 = t_138 and t_139,
      temp bool t_141 = Producer.state == 2,
      temp bool t_142 = t_140 and t_141;

    guardCondition t_142;
    effect
      Sender.state = 6,
      Producer.result = 3,
      Producer.state = 3;

  process Sender_K 
    guardBlock
      temp bool t_143 = Sender.state == 3,
      temp bool t_144 = Sender.i == 1,
      temp bool t_145 = Sender.i == Sender.n,
      temp bool t_146 = t_144 and t_145,
      temp bool t_147 = t_143 and t_146,
      temp bool t_148 = K.state == 0,
      temp bool t_149 = t_147 and t_148;

    guardCondition t_149;
    effect
      Sender.state = 2,
      temp byte t_150 = 6 + Sender.ab,
      K.value = t_150,
      K.state = 1;

  process Sender_K 
    guardBlock
      temp bool t_151 = Sender.state == 3,
      temp bool t_152 = Sender.i > 1,
      temp bool t_153 = Sender.i == Sender.n,
      temp bool t_154 = t_152 and t_153,
      temp bool t_155 = t_151 and t_154,
      temp bool t_156 = K.state == 0,
      temp bool t_157 = t_155 and t_156;

    guardCondition t_157;
    effect
      Sender.state = 2,
      temp byte t_158 = 2 + Sender.ab,
      K.value = t_158,
      K.state = 1;

  process Sender_K 
    guardBlock
      temp bool t_159 = Sender.state == 3,
      temp bool t_160 = Sender.i == 1,
      temp bool t_161 = Sender.i < Sender.n,
      temp bool t_162 = t_160 and t_161,
      temp bool t_163 = t_159 and t_162,
      temp bool t_164 = K.state == 0,
      temp bool t_165 = t_163 and t_164;

    guardCondition t_165;
    effect
      Sender.state = 2,
      temp byte t_166 = 4 + Sender.ab,
      K.value = t_166,
      K.state = 1;

  process Sender_K 
    guardBlock
      temp bool t_167 = Sender.state == 3,
      temp bool t_168 = Sender.i > 1,
      temp bool t_169 = Sender.i < Sender.n,
      temp bool t_170 = t_168 and t_169,
      temp bool t_171 = t_167 and t_170,
      temp bool t_172 = K.state == 0,
      temp bool t_173 = t_171 and t_172;

    guardCondition t_173;
    effect
      Sender.state = 2,
      K.value = Sender.ab,
      K.state = 1;

  process Producer_Sender 
    guardBlock
      temp bool t_174 = Producer.state == 1,
      temp bool t_175 = Sender.state == 0,
      temp bool t_176 = t_174 and t_175;

    guardCondition t_176;
    effect
      Producer.state = 2,
      Sender.n = prod_n,
      Sender.state = 1,
      Sender.i = 1;


