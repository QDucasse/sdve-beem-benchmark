byte prod_n = 0;
state {ready(0), start_send(1), wait_result(2), check(3)} Producer.state = 0;
byte Producer.result = 0;
byte Producer.n = 0;
state {ready(0), get_msg(1), check(2), st_error(3)} Consumer.state = 0;
byte Consumer.m = 0;
byte Consumer.n = 0;
state {idle(0), next_frame(1), wait_ack(2), send(3), success(4), q_error(5), ret(6)} Sender.state = 0;
byte Sender.ab = 0;
byte Sender.n = 0;
byte Sender.i = 0;
byte Sender.counter = 0;
state {idle(0), new_file(1), frame_received(2), frame_reported(3), first_safe(4), ret(5)} Receiver.state = 1;
byte Receiver.value = 0;
byte Receiver.exp_ab = 0;
state {ready(0), got_msg(1)} K.state = 0;
byte K.value = 0;
state {ready(0), got_msg(1)} L.state = 0;

  process Producer
    guardBlock
      temp bool t_0 = Producer.state == 0;
    guardCondition t_0;
    effect
      Producer.state = 1,
      prod_n = 1;

  process Producer
    guardBlock
      temp bool t_1 = Producer.state == 0;
    guardCondition t_1;
    effect
      Producer.state = 1,
      prod_n = 2;

  process Producer
    guardBlock
      temp bool t_2 = Producer.state == 0;
    guardCondition t_2;
    effect
      Producer.state = 1,
      prod_n = 3;

  process Producer
    guardBlock
      temp bool t_3 = Producer.state == 3,
      temp bool t_4 = Producer.result == 2,
      temp bool t_5 = Producer.result == 3,
      temp bool t_6 = t_4 or t_5,
      temp bool t_7 = t_3 and t_6;
    guardCondition t_7;
    effect
      Producer.state = 1;

  process Consumer
    guardBlock
      temp bool t_8 = Consumer.state == 1,
      temp bool t_9 = Consumer.m == 4,
      temp bool t_10 = Consumer.m == 5,
      temp bool t_11 = t_9 or t_10,
      temp bool t_12 = t_8 and t_11;
    guardCondition t_12;
    effect
      Consumer.state = 0;

  process Consumer
    guardBlock
      temp bool t_13 = Consumer.state == 1,
      temp bool t_14 = Consumer.m == 2,
      temp bool t_15 = t_13 and t_14;
    guardCondition t_15;
    effect
      Consumer.state = 0,
      Consumer.n = 0;

  process Consumer
    guardBlock
      temp bool t_16 = Consumer.state == 1,
      temp bool t_17 = Consumer.m == 1,
      temp bool t_18 = t_16 and t_17;
    guardCondition t_18;
    effect
      Consumer.state = 2;

  process Consumer
    guardBlock
      temp bool t_19 = Consumer.state == 2,
      temp bool t_20 = Consumer.n != prod_n,
      temp bool t_21 = t_19 and t_20;
    guardCondition t_21;
    effect
      Consumer.state = 3;

  process Sender
    guardBlock
      temp bool t_22 = Sender.state == 1;
    guardCondition t_22;
    effect
      Sender.state = 3,
      Sender.counter = 0;

  process Sender
    guardBlock
      temp bool t_23 = Sender.state == 4,
      temp bool t_24 = Sender.i < Sender.n,
      temp bool t_25 = t_23 and t_24;
    guardCondition t_25;
    effect
      Sender.state = 1,
      temp int t_26 = Sender.i + 1,
      Sender.i = t_26;

  process Receiver
    guardBlock
      temp bool t_27 = Receiver.state == 4;
    guardCondition t_27;
    effect
      Receiver.state = 2,
      temp byte t_28 = Receiver.value and 1,
      Receiver.exp_ab = t_28;

  process Receiver
    guardBlock
      temp bool t_29 = Receiver.state == 0,
      temp byte t_30 = Receiver.value and 2,
      temp bool t_31 = t_30 == 2,
      temp bool t_32 = t_29 and t_31;
    guardCondition t_32;
    effect
      Receiver.state = 5;

  process L_Sender
    guardBlock
      temp bool t_33 = L.state == 1,
      temp bool t_34 = Sender.state == 2,
      temp bool t_35 = t_33 and t_34;
    guardCondition t_35;
    effect
      L.state = 0,
      Sender.state = 4,
      temp int t_36 = 1 - Sender.ab,
      Sender.ab = t_36;

  process Receiver_L
    guardBlock
      temp bool t_37 = Receiver.state == 2,
      temp byte t_38 = Receiver.value and 1,
      temp bool t_39 = Receiver.exp_ab != t_38,
      temp bool t_40 = t_37 and t_39,
      temp bool t_41 = L.state == 0,
      temp bool t_42 = t_40 and t_41;
    guardCondition t_42;
    effect
      Receiver.state = 0,
      L.state = 1;

  process Receiver_L
    guardBlock
      temp bool t_43 = Receiver.state == 3,
      temp bool t_44 = L.state == 0,
      temp bool t_45 = t_43 and t_44;
    guardCondition t_45;
    effect
      Receiver.state = 0,
      temp int t_46 = 1 - Receiver.exp_ab,
      Receiver.exp_ab = t_46,
      L.state = 1;

  process Sender_Receiver
    guardBlock
      temp bool t_47 = Sender.state == 6,
      temp bool t_48 = Receiver.state == 5,
      temp bool t_49 = t_47 and t_48;
    guardCondition t_49;
    effect
      Sender.state = 0,
      Receiver.state = 1;

  process Sender_Receiver
    guardBlock
      temp bool t_50 = Sender.state == 6,
      temp bool t_51 = Receiver.state == 1,
      temp bool t_52 = t_50 and t_51;
    guardCondition t_52;
    effect
      Sender.state = 0,
      Receiver.state = 1;

  process Producer_Sender
    guardBlock
      temp bool t_53 = Producer.state == 1,
      temp bool t_54 = Sender.state == 0,
      temp bool t_55 = t_53 and t_54;
    guardCondition t_55;
    effect
      Producer.state = 2,
      Sender.n = prod_n,
      Sender.state = 1,
      Sender.i = 1;

  process K_Receiver
    guardBlock
      temp bool t_56 = K.state == 1,
      temp bool t_57 = Receiver.state == 1,
      temp bool t_58 = t_56 and t_57;
    guardCondition t_58;
    effect
      K.state = 0,
      Receiver.value = K.value,
      Receiver.state = 4;

  process K_Receiver
    guardBlock
      temp bool t_59 = K.state == 1,
      temp bool t_60 = Receiver.state == 0,
      temp bool t_61 = t_59 and t_60;
    guardCondition t_61;
    effect
      K.state = 0,
      Receiver.value = K.value,
      Receiver.state = 2;

  process Producer_Consumer
    guardBlock
      temp bool t_62 = Producer.state == 3,
      temp bool t_63 = Producer.result == 1,
      temp bool t_64 = t_62 and t_63,
      temp bool t_65 = Consumer.state == 2,
      temp bool t_66 = Consumer.n == prod_n,
      temp bool t_67 = t_65 and t_66,
      temp bool t_68 = t_64 and t_67;
    guardCondition t_68;
    effect
      Producer.state = 0,
      Consumer.state = 0;

  process Sender_Producer
    guardBlock
      temp bool t_69 = Sender.state == 4,
      temp bool t_70 = Sender.i == Sender.n,
      temp bool t_71 = t_69 and t_70,
      temp bool t_72 = Producer.state == 2,
      temp bool t_73 = t_71 and t_72;
    guardCondition t_73;
    effect
      Sender.state = 6,
      Producer.result = 1,
      Producer.state = 3;

  process Sender_Producer
    guardBlock
      temp bool t_74 = Sender.state == 5,
      temp bool t_75 = Sender.i < Sender.n,
      temp bool t_76 = t_74 and t_75,
      temp bool t_77 = Producer.state == 2,
      temp bool t_78 = t_76 and t_77;
    guardCondition t_78;
    effect
      Sender.state = 6,
      Producer.result = 2,
      Producer.state = 3;

  process Sender_Producer
    guardBlock
      temp bool t_79 = Sender.state == 5,
      temp bool t_80 = Sender.i == Sender.n,
      temp bool t_81 = t_79 and t_80,
      temp bool t_82 = Producer.state == 2,
      temp bool t_83 = t_81 and t_82;
    guardCondition t_83;
    effect
      Sender.state = 6,
      Producer.result = 3,
      Producer.state = 3;

  process K_Sender
    guardBlock
      temp bool t_84 = K.state == 1,
      temp bool t_85 = Sender.state == 2,
      temp bool t_86 = Sender.counter == 5,
      temp bool t_87 = t_85 and t_86,
      temp bool t_88 = t_84 and t_87;
    guardCondition t_88;
    effect
      K.state = 0,
      Sender.state = 5;

  process K_Sender
    guardBlock
      temp bool t_89 = K.state == 1,
      temp bool t_90 = Sender.state == 2,
      temp bool t_91 = Sender.counter < 5,
      temp bool t_92 = t_90 and t_91,
      temp bool t_93 = t_89 and t_92;
    guardCondition t_93;
    effect
      K.state = 0,
      Sender.state = 3,
      temp int t_94 = Sender.counter + 1,
      Sender.counter = t_94;

  process L_Sender
    guardBlock
      temp bool t_95 = L.state == 1,
      temp bool t_96 = Sender.state == 2,
      temp bool t_97 = Sender.counter == 5,
      temp bool t_98 = t_96 and t_97,
      temp bool t_99 = t_95 and t_98;
    guardCondition t_99;
    effect
      L.state = 0,
      Sender.state = 5;

  process L_Sender
    guardBlock
      temp bool t_100 = L.state == 1,
      temp bool t_101 = Sender.state == 2,
      temp bool t_102 = Sender.counter < 5,
      temp bool t_103 = t_101 and t_102,
      temp bool t_104 = t_100 and t_103;
    guardCondition t_104;
    effect
      L.state = 0,
      Sender.state = 3,
      temp int t_105 = Sender.counter + 1,
      Sender.counter = t_105;

  process Receiver_Consumer
    guardBlock
      temp bool t_106 = Receiver.state == 2,
      temp byte t_107 = Receiver.value and 1,
      temp bool t_108 = t_107 == Receiver.exp_ab,
      temp byte t_109 = Receiver.value and 2,
      temp bool t_110 = t_109 == 2,
      temp bool t_111 = t_108 and t_110,
      temp bool t_112 = t_106 and t_111,
      temp bool t_113 = Consumer.state == 0,
      temp bool t_114 = t_112 and t_113;
    guardCondition t_114;
    effect
      Receiver.state = 3,
      Consumer.m = 1,
      Consumer.state = 1,
      temp int t_115 = Consumer.n + 1,
      Consumer.n = t_115;

  process Receiver_Consumer
    guardBlock
      temp bool t_116 = Receiver.state == 2,
      temp byte t_117 = Receiver.value and 1,
      temp bool t_118 = t_117 == Receiver.exp_ab,
      temp byte t_119 = Receiver.value and 2,
      temp bool t_120 = t_119 == 0,
      temp bool t_121 = t_118 and t_120,
      temp byte t_122 = Receiver.value and 4,
      temp bool t_123 = t_122 == 0,
      temp bool t_124 = t_121 and t_123,
      temp bool t_125 = t_116 and t_124,
      temp bool t_126 = Consumer.state == 0,
      temp bool t_127 = t_125 and t_126;
    guardCondition t_127;
    effect
      Receiver.state = 3,
      Consumer.m = 5,
      Consumer.state = 1,
      temp int t_128 = Consumer.n + 1,
      Consumer.n = t_128;

  process Receiver_Consumer
    guardBlock
      temp bool t_129 = Receiver.state == 2,
      temp byte t_130 = Receiver.value and 1,
      temp bool t_131 = t_130 == Receiver.exp_ab,
      temp byte t_132 = Receiver.value and 2,
      temp bool t_133 = t_132 == 0,
      temp bool t_134 = t_131 and t_133,
      temp byte t_135 = Receiver.value and 4,
      temp bool t_136 = t_135 == 4,
      temp bool t_137 = t_134 and t_136,
      temp bool t_138 = t_129 and t_137,
      temp bool t_139 = Consumer.state == 0,
      temp bool t_140 = t_138 and t_139;
    guardCondition t_140;
    effect
      Receiver.state = 3,
      Consumer.m = 4,
      Consumer.state = 1,
      temp int t_141 = Consumer.n + 1,
      Consumer.n = t_141;

  process Receiver_Consumer
    guardBlock
      temp bool t_142 = Receiver.state == 0,
      temp bool t_143 = Consumer.state == 0,
      temp bool t_144 = t_142 and t_143;
    guardCondition t_144;
    effect
      Receiver.state = 5,
      Consumer.m = 2,
      Consumer.state = 1,
      temp int t_145 = Consumer.n + 1,
      Consumer.n = t_145;

  process Sender_K
    guardBlock
      temp bool t_146 = Sender.state == 3,
      temp bool t_147 = Sender.i == 1,
      temp bool t_148 = Sender.i == Sender.n,
      temp bool t_149 = t_147 and t_148,
      temp bool t_150 = t_146 and t_149,
      temp bool t_151 = K.state == 0,
      temp bool t_152 = t_150 and t_151;
    guardCondition t_152;
    effect
      Sender.state = 2,
      temp int t_153 = 6 + Sender.ab,
      K.value = t_153,
      K.state = 1;

  process Sender_K
    guardBlock
      temp bool t_154 = Sender.state == 3,
      temp bool t_155 = Sender.i > 1,
      temp bool t_156 = Sender.i == Sender.n,
      temp bool t_157 = t_155 and t_156,
      temp bool t_158 = t_154 and t_157,
      temp bool t_159 = K.state == 0,
      temp bool t_160 = t_158 and t_159;
    guardCondition t_160;
    effect
      Sender.state = 2,
      temp int t_161 = 2 + Sender.ab,
      K.value = t_161,
      K.state = 1;

  process Sender_K
    guardBlock
      temp bool t_162 = Sender.state == 3,
      temp bool t_163 = Sender.i == 1,
      temp bool t_164 = Sender.i < Sender.n,
      temp bool t_165 = t_163 and t_164,
      temp bool t_166 = t_162 and t_165,
      temp bool t_167 = K.state == 0,
      temp bool t_168 = t_166 and t_167;
    guardCondition t_168;
    effect
      Sender.state = 2,
      temp int t_169 = 4 + Sender.ab,
      K.value = t_169,
      K.state = 1;

  process Sender_K
    guardBlock
      temp bool t_170 = Sender.state == 3,
      temp bool t_171 = Sender.i > 1,
      temp bool t_172 = Sender.i < Sender.n,
      temp bool t_173 = t_171 and t_172,
      temp bool t_174 = t_170 and t_173,
      temp bool t_175 = K.state == 0,
      temp bool t_176 = t_174 and t_175;
    guardCondition t_176;
    effect
      Sender.state = 2,
      K.value = Sender.ab,
      K.state = 1;
