state {ready(0), start_send(1), wait_result(2), check(3)} Producer.state = 0;
state {ready(0), get_msg(1), check(2), st_error(3)} Consumer.state = 0;
state {idle(0), next_frame(1), wait_ack(2), send(3), success(4), q_error(5), ret(6)} Sender.state = 0;
state {idle(0), new_file(1), frame_received(2), frame_reported(3), first_safe(4), ret(5)} Receiver.state = 1;
state {ready(0), got_msg(1)} K.state = 0;
state {ready(0), got_msg(1)} L.state = 0;
state {q1(0), q2(1)} LTL_property.state = 0;
byte prod_n = 0;
byte Producer.result = 0;
byte Producer.n = 0;
byte Consumer.m = 0;
byte Consumer.n = 0;
byte Sender.ab = 0;
byte Sender.n = 0;
byte Sender.i = 0;
byte Sender.counter = 0;
byte Receiver.value = 0;
byte Receiver.exp_ab = 0;
byte K.value = 0;

  process Producer 
    guardBlock
      temp bool t_0 = Producer.state == 0;

    guardCondition t_0;
    effect
      Producer.state = 1,
      prod_n = 1;

  process Producer 
    guardBlock
      temp bool t_1 = Producer.state == 0;

    guardCondition t_1;
    effect
      Producer.state = 1,
      prod_n = 2;

  process Producer 
    guardBlock
      temp bool t_2 = Producer.state == 0;

    guardCondition t_2;
    effect
      Producer.state = 1,
      prod_n = 3;

  process Producer 
    guardBlock
      temp bool t_3 = Producer.state == 0;

    guardCondition t_3;
    effect
      Producer.state = 1,
      prod_n = 4;

  process Producer 
    guardBlock
      temp bool t_4 = Producer.state == 0;

    guardCondition t_4;
    effect
      Producer.state = 1,
      prod_n = 5;

  process Producer 
    guardBlock
      temp bool t_5 = Producer.state == 0;

    guardCondition t_5;
    effect
      Producer.state = 1,
      prod_n = 6;

  process Producer 
    guardBlock
      temp bool t_6 = Producer.state == 0;

    guardCondition t_6;
    effect
      Producer.state = 1,
      prod_n = 7;

  process Producer 
    guardBlock
      temp bool t_7 = Producer.state == 0;

    guardCondition t_7;
    effect
      Producer.state = 1,
      prod_n = 8;

  process Producer 
    guardBlock
      temp bool t_8 = Producer.state == 0;

    guardCondition t_8;
    effect
      Producer.state = 1,
      prod_n = 9;

  process Producer 
    guardBlock
      temp bool t_9 = Producer.state == 0;

    guardCondition t_9;
    effect
      Producer.state = 1,
      prod_n = 10;

  process Producer 
    guardBlock
      temp bool t_10 = Producer.state == 3,
      temp bool t_11 = Producer.result == 2,
      temp bool t_12 = Producer.result == 3,
      temp bool t_13 = t_11 or t_12,
      temp bool t_14 = t_10 and t_13;

    guardCondition t_14;
    effect
      Producer.state = 1;

  process Consumer 
    guardBlock
      temp bool t_15 = Consumer.state == 1,
      temp bool t_16 = Consumer.m == 4,
      temp bool t_17 = Consumer.m == 5,
      temp bool t_18 = t_16 or t_17,
      temp bool t_19 = t_15 and t_18;

    guardCondition t_19;
    effect
      Consumer.state = 0;

  process Consumer 
    guardBlock
      temp bool t_20 = Consumer.state == 1,
      temp bool t_21 = Consumer.m == 2,
      temp bool t_22 = t_20 and t_21;

    guardCondition t_22;
    effect
      Consumer.state = 0,
      Consumer.n = 0;

  process Consumer 
    guardBlock
      temp bool t_23 = Consumer.state == 1,
      temp bool t_24 = Consumer.m == 1,
      temp bool t_25 = t_23 and t_24;

    guardCondition t_25;
    effect
      Consumer.state = 2;

  process Consumer 
    guardBlock
      temp bool t_26 = Consumer.state == 2,
      temp bool t_27 = Consumer.n != prod_n,
      temp bool t_28 = t_26 and t_27;

    guardCondition t_28;
    effect
      Consumer.state = 3;

  process Sender 
    guardBlock
      temp bool t_29 = Sender.state == 1;

    guardCondition t_29;
    effect
      Sender.state = 3,
      Sender.counter = 0;

  process Sender 
    guardBlock
      temp bool t_30 = Sender.state == 4,
      temp bool t_31 = Sender.i < Sender.n,
      temp bool t_32 = t_30 and t_31;

    guardCondition t_32;
    effect
      Sender.state = 1,
      temp byte t_33 = Sender.i + 1,
      Sender.i = t_33;

  process Receiver 
    guardBlock
      temp bool t_34 = Receiver.state == 4;

    guardCondition t_34;
    effect
      Receiver.state = 2,
      temp byte t_35 = Receiver.value and 1,
      Receiver.exp_ab = t_35;

  process Receiver 
    guardBlock
      temp bool t_36 = Receiver.state == 0,
      temp byte t_37 = Receiver.value and 2,
      temp bool t_38 = t_37 == 2,
      temp bool t_39 = t_36 and t_38;

    guardCondition t_39;
    effect
      Receiver.state = 5;

  process LTL_property 
    guardBlock
      temp bool t_40 = LTL_property.state == 0;

    guardCondition t_40;
    effect
      LTL_property.state = 0;

  process LTL_property 
    guardBlock
      temp bool t_41 = LTL_property.state == 0,
      temp bool t_42 = Producer.state == 2,
      temp bool t_43 = Producer.state == 3,
      temp bool t_44 = not t_43,
      temp bool t_45 = t_42 and t_44,
      temp bool t_46 = t_41 and t_45;

    guardCondition t_46;
    effect
      LTL_property.state = 1;

  process LTL_property 
    guardBlock
      temp bool t_47 = LTL_property.state == 1,
      temp bool t_48 = Producer.state == 3,
      temp bool t_49 = not t_48,
      temp bool t_50 = t_47 and t_49;

    guardCondition t_50;
    effect
      LTL_property.state = 1;

  process Sender_K 
    guardBlock
      temp bool t_51 = Sender.state == 3,
      temp bool t_52 = Sender.i == 1,
      temp bool t_53 = Sender.i == Sender.n,
      temp bool t_54 = t_52 and t_53,
      temp bool t_55 = t_51 and t_54,
      temp bool t_56 = K.state == 0,
      temp bool t_57 = t_55 and t_56;

    guardCondition t_57;
    effect
      Sender.state = 2,
      temp byte t_58 = 6 + Sender.ab,
      K.value = t_58,
      K.state = 1;

  process Sender_K 
    guardBlock
      temp bool t_59 = Sender.state == 3,
      temp bool t_60 = Sender.i > 1,
      temp bool t_61 = Sender.i == Sender.n,
      temp bool t_62 = t_60 and t_61,
      temp bool t_63 = t_59 and t_62,
      temp bool t_64 = K.state == 0,
      temp bool t_65 = t_63 and t_64;

    guardCondition t_65;
    effect
      Sender.state = 2,
      temp byte t_66 = 2 + Sender.ab,
      K.value = t_66,
      K.state = 1;

  process Sender_K 
    guardBlock
      temp bool t_67 = Sender.state == 3,
      temp bool t_68 = Sender.i == 1,
      temp bool t_69 = Sender.i < Sender.n,
      temp bool t_70 = t_68 and t_69,
      temp bool t_71 = t_67 and t_70,
      temp bool t_72 = K.state == 0,
      temp bool t_73 = t_71 and t_72;

    guardCondition t_73;
    effect
      Sender.state = 2,
      temp byte t_74 = 4 + Sender.ab,
      K.value = t_74,
      K.state = 1;

  process Sender_K 
    guardBlock
      temp bool t_75 = Sender.state == 3,
      temp bool t_76 = Sender.i > 1,
      temp bool t_77 = Sender.i < Sender.n,
      temp bool t_78 = t_76 and t_77,
      temp bool t_79 = t_75 and t_78,
      temp bool t_80 = K.state == 0,
      temp bool t_81 = t_79 and t_80;

    guardCondition t_81;
    effect
      Sender.state = 2,
      K.value = Sender.ab,
      K.state = 1;

  process Sender_Receiver 
    guardBlock
      temp bool t_82 = Sender.state == 6,
      temp bool t_83 = Receiver.state == 5,
      temp bool t_84 = t_82 and t_83;

    guardCondition t_84;
    effect
      Sender.state = 0,
      Receiver.state = 1;

  process Sender_Receiver 
    guardBlock
      temp bool t_85 = Sender.state == 6,
      temp bool t_86 = Receiver.state == 1,
      temp bool t_87 = t_85 and t_86;

    guardCondition t_87;
    effect
      Sender.state = 0,
      Receiver.state = 1;

  process K_Receiver 
    guardBlock
      temp bool t_88 = K.state == 1,
      temp bool t_89 = Receiver.state == 1,
      temp bool t_90 = t_88 and t_89;

    guardCondition t_90;
    effect
      K.state = 0,
      Receiver.value = K.value,
      Receiver.state = 4;

  process K_Receiver 
    guardBlock
      temp bool t_91 = K.state == 1,
      temp bool t_92 = Receiver.state == 0,
      temp bool t_93 = t_91 and t_92;

    guardCondition t_93;
    effect
      K.state = 0,
      Receiver.value = K.value,
      Receiver.state = 2;

  process Sender_Producer 
    guardBlock
      temp bool t_94 = Sender.state == 4,
      temp bool t_95 = Sender.i == Sender.n,
      temp bool t_96 = t_94 and t_95,
      temp bool t_97 = Producer.state == 2,
      temp bool t_98 = t_96 and t_97;

    guardCondition t_98;
    effect
      Sender.state = 6,
      Producer.result = 1,
      Producer.state = 3;

  process Sender_Producer 
    guardBlock
      temp bool t_99 = Sender.state == 5,
      temp bool t_100 = Sender.i < Sender.n,
      temp bool t_101 = t_99 and t_100,
      temp bool t_102 = Producer.state == 2,
      temp bool t_103 = t_101 and t_102;

    guardCondition t_103;
    effect
      Sender.state = 6,
      Producer.result = 2,
      Producer.state = 3;

  process Sender_Producer 
    guardBlock
      temp bool t_104 = Sender.state == 5,
      temp bool t_105 = Sender.i == Sender.n,
      temp bool t_106 = t_104 and t_105,
      temp bool t_107 = Producer.state == 2,
      temp bool t_108 = t_106 and t_107;

    guardCondition t_108;
    effect
      Sender.state = 6,
      Producer.result = 3,
      Producer.state = 3;

  process Receiver_Consumer 
    guardBlock
      temp bool t_109 = Receiver.state == 2,
      temp byte t_110 = Receiver.value and 1,
      temp bool t_111 = t_110 == Receiver.exp_ab,
      temp byte t_112 = Receiver.value and 2,
      temp bool t_113 = t_112 == 2,
      temp bool t_114 = t_111 and t_113,
      temp bool t_115 = t_109 and t_114,
      temp bool t_116 = Consumer.state == 0,
      temp bool t_117 = t_115 and t_116;

    guardCondition t_117;
    effect
      Receiver.state = 3,
      Consumer.m = 1,
      Consumer.state = 1,
      temp byte t_118 = Consumer.n + 1,
      Consumer.n = t_118;

  process Receiver_Consumer 
    guardBlock
      temp bool t_119 = Receiver.state == 2,
      temp byte t_120 = Receiver.value and 1,
      temp bool t_121 = t_120 == Receiver.exp_ab,
      temp byte t_122 = Receiver.value and 2,
      temp bool t_123 = t_122 == 0,
      temp bool t_124 = t_121 and t_123,
      temp byte t_125 = Receiver.value and 4,
      temp bool t_126 = t_125 == 0,
      temp bool t_127 = t_124 and t_126,
      temp bool t_128 = t_119 and t_127,
      temp bool t_129 = Consumer.state == 0,
      temp bool t_130 = t_128 and t_129;

    guardCondition t_130;
    effect
      Receiver.state = 3,
      Consumer.m = 5,
      Consumer.state = 1,
      temp byte t_131 = Consumer.n + 1,
      Consumer.n = t_131;

  process Receiver_Consumer 
    guardBlock
      temp bool t_132 = Receiver.state == 2,
      temp byte t_133 = Receiver.value and 1,
      temp bool t_134 = t_133 == Receiver.exp_ab,
      temp byte t_135 = Receiver.value and 2,
      temp bool t_136 = t_135 == 0,
      temp bool t_137 = t_134 and t_136,
      temp byte t_138 = Receiver.value and 4,
      temp bool t_139 = t_138 == 4,
      temp bool t_140 = t_137 and t_139,
      temp bool t_141 = t_132 and t_140,
      temp bool t_142 = Consumer.state == 0,
      temp bool t_143 = t_141 and t_142;

    guardCondition t_143;
    effect
      Receiver.state = 3,
      Consumer.m = 4,
      Consumer.state = 1,
      temp byte t_144 = Consumer.n + 1,
      Consumer.n = t_144;

  process Receiver_Consumer 
    guardBlock
      temp bool t_145 = Receiver.state == 0,
      temp bool t_146 = Consumer.state == 0,
      temp bool t_147 = t_145 and t_146;

    guardCondition t_147;
    effect
      Receiver.state = 5,
      Consumer.m = 2,
      Consumer.state = 1,
      temp byte t_148 = Consumer.n + 1,
      Consumer.n = t_148;

  process L_Sender 
    guardBlock
      temp bool t_149 = L.state == 1,
      temp bool t_150 = Sender.state == 2,
      temp bool t_151 = t_149 and t_150;

    guardCondition t_151;
    effect
      L.state = 0,
      Sender.state = 4,
      temp byte t_152 = 1 - Sender.ab,
      Sender.ab = t_152;

  process K_Sender 
    guardBlock
      temp bool t_153 = K.state == 1,
      temp bool t_154 = Sender.state == 2,
      temp bool t_155 = Sender.counter == 10,
      temp bool t_156 = t_154 and t_155,
      temp bool t_157 = t_153 and t_156;

    guardCondition t_157;
    effect
      K.state = 0,
      Sender.state = 5;

  process K_Sender 
    guardBlock
      temp bool t_158 = K.state == 1,
      temp bool t_159 = Sender.state == 2,
      temp bool t_160 = Sender.counter < 10,
      temp bool t_161 = t_159 and t_160,
      temp bool t_162 = t_158 and t_161;

    guardCondition t_162;
    effect
      K.state = 0,
      Sender.state = 3,
      temp byte t_163 = Sender.counter + 1,
      Sender.counter = t_163;

  process L_Sender 
    guardBlock
      temp bool t_164 = L.state == 1,
      temp bool t_165 = Sender.state == 2,
      temp bool t_166 = Sender.counter == 10,
      temp bool t_167 = t_165 and t_166,
      temp bool t_168 = t_164 and t_167;

    guardCondition t_168;
    effect
      L.state = 0,
      Sender.state = 5;

  process L_Sender 
    guardBlock
      temp bool t_169 = L.state == 1,
      temp bool t_170 = Sender.state == 2,
      temp bool t_171 = Sender.counter < 10,
      temp bool t_172 = t_170 and t_171,
      temp bool t_173 = t_169 and t_172;

    guardCondition t_173;
    effect
      L.state = 0,
      Sender.state = 3,
      temp byte t_174 = Sender.counter + 1,
      Sender.counter = t_174;

  process Receiver_L 
    guardBlock
      temp bool t_175 = Receiver.state == 2,
      temp byte t_176 = Receiver.value and 1,
      temp bool t_177 = Receiver.exp_ab != t_176,
      temp bool t_178 = t_175 and t_177,
      temp bool t_179 = L.state == 0,
      temp bool t_180 = t_178 and t_179;

    guardCondition t_180;
    effect
      Receiver.state = 0,
      L.state = 1;

  process Receiver_L 
    guardBlock
      temp bool t_181 = Receiver.state == 3,
      temp bool t_182 = L.state == 0,
      temp bool t_183 = t_181 and t_182;

    guardCondition t_183;
    effect
      Receiver.state = 0,
      temp byte t_184 = 1 - Receiver.exp_ab,
      Receiver.exp_ab = t_184,
      L.state = 1;

  process Producer_Sender 
    guardBlock
      temp bool t_185 = Producer.state == 1,
      temp bool t_186 = Sender.state == 0,
      temp bool t_187 = t_185 and t_186;

    guardCondition t_187;
    effect
      Producer.state = 2,
      Sender.n = prod_n,
      Sender.state = 1,
      Sender.i = 1;

  process Producer_Consumer 
    guardBlock
      temp bool t_188 = Producer.state == 3,
      temp bool t_189 = Producer.result == 1,
      temp bool t_190 = t_188 and t_189,
      temp bool t_191 = Consumer.state == 2,
      temp bool t_192 = Consumer.n == prod_n,
      temp bool t_193 = t_191 and t_192,
      temp bool t_194 = t_190 and t_193;

    guardCondition t_194;
    effect
      Producer.state = 0,
      Consumer.state = 0;

accepting conditions
  LTL_property.state == 1

