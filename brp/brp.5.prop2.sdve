byte prod_n = 0;
state {ready(0), start_send(1), wait_result(2), check(3)} Producer.state = 0;
byte Producer.result = 0;
byte Producer.n = 0;
state {ready(0), get_msg(1), check(2), st_error(3)} Consumer.state = 0;
byte Consumer.m = 0;
byte Consumer.n = 0;
state {idle(0), next_frame(1), wait_ack(2), send(3), success(4), q_error(5), ret(6)} Sender.state = 0;
byte Sender.ab = 0;
byte Sender.n = 0;
byte Sender.i = 0;
byte Sender.counter = 0;
state {idle(0), new_file(1), frame_received(2), frame_reported(3), first_safe(4), ret(5)} Receiver.state = 1;
byte Receiver.value = 0;
byte Receiver.exp_ab = 0;
state {ready(0), got_msg(1)} K.state = 0;
byte K.value = 0;
state {ready(0), got_msg(1)} L.state = 0;
state {q1(0), q2(1)} LTL_property.state = 0;

  process Producer
    guardBlock
      temp bool t_0 = Producer.state == 0;
    guardCondition t_0;
    effect
      Producer.state = 1,
      prod_n = 1;

  process Producer
    guardBlock
      temp bool t_1 = Producer.state == 0;
    guardCondition t_1;
    effect
      Producer.state = 1,
      prod_n = 2;

  process Producer
    guardBlock
      temp bool t_2 = Producer.state == 0;
    guardCondition t_2;
    effect
      Producer.state = 1,
      prod_n = 3;

  process Producer
    guardBlock
      temp bool t_3 = Producer.state == 0;
    guardCondition t_3;
    effect
      Producer.state = 1,
      prod_n = 4;

  process Producer
    guardBlock
      temp bool t_4 = Producer.state == 0;
    guardCondition t_4;
    effect
      Producer.state = 1,
      prod_n = 5;

  process Producer
    guardBlock
      temp bool t_5 = Producer.state == 0;
    guardCondition t_5;
    effect
      Producer.state = 1,
      prod_n = 6;

  process Producer
    guardBlock
      temp bool t_6 = Producer.state == 0;
    guardCondition t_6;
    effect
      Producer.state = 1,
      prod_n = 7;

  process Producer
    guardBlock
      temp bool t_7 = Producer.state == 0;
    guardCondition t_7;
    effect
      Producer.state = 1,
      prod_n = 8;

  process Producer
    guardBlock
      temp bool t_8 = Producer.state == 0;
    guardCondition t_8;
    effect
      Producer.state = 1,
      prod_n = 9;

  process Producer
    guardBlock
      temp bool t_9 = Producer.state == 0;
    guardCondition t_9;
    effect
      Producer.state = 1,
      prod_n = 10;

  process Producer
    guardBlock
      temp bool t_10 = Producer.state == 0;
    guardCondition t_10;
    effect
      Producer.state = 1,
      prod_n = 11;

  process Producer
    guardBlock
      temp bool t_11 = Producer.state == 0;
    guardCondition t_11;
    effect
      Producer.state = 1,
      prod_n = 12;

  process Producer
    guardBlock
      temp bool t_12 = Producer.state == 0;
    guardCondition t_12;
    effect
      Producer.state = 1,
      prod_n = 13;

  process Producer
    guardBlock
      temp bool t_13 = Producer.state == 0;
    guardCondition t_13;
    effect
      Producer.state = 1,
      prod_n = 14;

  process Producer
    guardBlock
      temp bool t_14 = Producer.state == 0;
    guardCondition t_14;
    effect
      Producer.state = 1,
      prod_n = 15;

  process Producer
    guardBlock
      temp bool t_15 = Producer.state == 0;
    guardCondition t_15;
    effect
      Producer.state = 1,
      prod_n = 16;

  process Producer
    guardBlock
      temp bool t_16 = Producer.state == 0;
    guardCondition t_16;
    effect
      Producer.state = 1,
      prod_n = 17;

  process Producer
    guardBlock
      temp bool t_17 = Producer.state == 0;
    guardCondition t_17;
    effect
      Producer.state = 1,
      prod_n = 18;

  process Producer
    guardBlock
      temp bool t_18 = Producer.state == 0;
    guardCondition t_18;
    effect
      Producer.state = 1,
      prod_n = 19;

  process Producer
    guardBlock
      temp bool t_19 = Producer.state == 0;
    guardCondition t_19;
    effect
      Producer.state = 1,
      prod_n = 20;

  process Producer
    guardBlock
      temp bool t_20 = Producer.state == 3,
      temp bool t_21 = Producer.result == 2,
      temp bool t_22 = Producer.result == 3,
      temp bool t_23 = t_21 or t_22,
      temp bool t_24 = t_20 and t_23;
    guardCondition t_24;
    effect
      Producer.state = 1;

  process Consumer
    guardBlock
      temp bool t_25 = Consumer.state == 1,
      temp bool t_26 = Consumer.m == 4,
      temp bool t_27 = Consumer.m == 5,
      temp bool t_28 = t_26 or t_27,
      temp bool t_29 = t_25 and t_28;
    guardCondition t_29;
    effect
      Consumer.state = 0;

  process Consumer
    guardBlock
      temp bool t_30 = Consumer.state == 1,
      temp bool t_31 = Consumer.m == 2,
      temp bool t_32 = t_30 and t_31;
    guardCondition t_32;
    effect
      Consumer.state = 0,
      Consumer.n = 0;

  process Consumer
    guardBlock
      temp bool t_33 = Consumer.state == 1,
      temp bool t_34 = Consumer.m == 1,
      temp bool t_35 = t_33 and t_34;
    guardCondition t_35;
    effect
      Consumer.state = 2;

  process Consumer
    guardBlock
      temp bool t_36 = Consumer.state == 2,
      temp bool t_37 = Consumer.n != prod_n,
      temp bool t_38 = t_36 and t_37;
    guardCondition t_38;
    effect
      Consumer.state = 3;

  process Sender
    guardBlock
      temp bool t_39 = Sender.state == 1;
    guardCondition t_39;
    effect
      Sender.state = 3,
      Sender.counter = 0;

  process Sender
    guardBlock
      temp bool t_40 = Sender.state == 4,
      temp bool t_41 = Sender.i < Sender.n,
      temp bool t_42 = t_40 and t_41;
    guardCondition t_42;
    effect
      Sender.state = 1,
      temp int t_43 = Sender.i + 1,
      Sender.i = t_43;

  process Receiver
    guardBlock
      temp bool t_44 = Receiver.state == 4;
    guardCondition t_44;
    effect
      Receiver.state = 2,
      temp byte t_45 = Receiver.value & 1,
      Receiver.exp_ab = t_45;

  process Receiver
    guardBlock
      temp bool t_46 = Receiver.state == 0,
      temp byte t_47 = Receiver.value & 2,
      temp bool t_48 = t_47 == 2,
      temp bool t_49 = t_46 and t_48;
    guardCondition t_49;
    effect
      Receiver.state = 5;

  process LTL_property
    guardBlock
      temp bool t_50 = LTL_property.state == 0;
    guardCondition t_50;
    effect
      LTL_property.state = 0;

  process LTL_property
    guardBlock
      temp bool t_51 = LTL_property.state == 0,
      temp bool t_52 = Producer.state == 2,
      temp bool t_53 = Producer.state == 3,
      temp bool t_54 = not t_53,
      temp bool t_55 = t_52 and t_54,
      temp bool t_56 = t_51 and t_55;
    guardCondition t_56;
    effect
      LTL_property.state = 1;

  process LTL_property
    guardBlock
      temp bool t_57 = LTL_property.state == 1,
      temp bool t_58 = Producer.state == 3,
      temp bool t_59 = not t_58,
      temp bool t_60 = t_57 and t_59;
    guardCondition t_60;
    effect
      LTL_property.state = 1;

  process K_Receiver
    guardBlock
      temp bool t_61 = K.state == 1,
      temp bool t_62 = Receiver.state == 1,
      temp bool t_63 = t_61 and t_62;
    guardCondition t_63;
    effect
      K.state = 0,
      Receiver.value = K.value,
      Receiver.state = 4;

  process K_Receiver
    guardBlock
      temp bool t_64 = K.state == 1,
      temp bool t_65 = Receiver.state == 0,
      temp bool t_66 = t_64 and t_65;
    guardCondition t_66;
    effect
      K.state = 0,
      Receiver.value = K.value,
      Receiver.state = 2;

  process Producer_Consumer
    guardBlock
      temp bool t_67 = Producer.state == 3,
      temp bool t_68 = Producer.result == 1,
      temp bool t_69 = t_67 and t_68,
      temp bool t_70 = Consumer.state == 2,
      temp bool t_71 = Consumer.n == prod_n,
      temp bool t_72 = t_70 and t_71,
      temp bool t_73 = t_69 and t_72;
    guardCondition t_73;
    effect
      Producer.state = 0,
      Consumer.state = 0;

  process Sender_Receiver
    guardBlock
      temp bool t_74 = Sender.state == 6,
      temp bool t_75 = Receiver.state == 5,
      temp bool t_76 = t_74 and t_75;
    guardCondition t_76;
    effect
      Sender.state = 0,
      Receiver.state = 1;

  process Sender_Receiver
    guardBlock
      temp bool t_77 = Sender.state == 6,
      temp bool t_78 = Receiver.state == 1,
      temp bool t_79 = t_77 and t_78;
    guardCondition t_79;
    effect
      Sender.state = 0,
      Receiver.state = 1;

  process Sender_K
    guardBlock
      temp bool t_80 = Sender.state == 3,
      temp bool t_81 = Sender.i == 1,
      temp bool t_82 = Sender.i == Sender.n,
      temp bool t_83 = t_81 and t_82,
      temp bool t_84 = t_80 and t_83,
      temp bool t_85 = K.state == 0,
      temp bool t_86 = t_84 and t_85;
    guardCondition t_86;
    effect
      Sender.state = 2,
      temp int t_87 = 6 + Sender.ab,
      K.value = t_87,
      K.state = 1;

  process Sender_K
    guardBlock
      temp bool t_88 = Sender.state == 3,
      temp bool t_89 = Sender.i > 1,
      temp bool t_90 = Sender.i == Sender.n,
      temp bool t_91 = t_89 and t_90,
      temp bool t_92 = t_88 and t_91,
      temp bool t_93 = K.state == 0,
      temp bool t_94 = t_92 and t_93;
    guardCondition t_94;
    effect
      Sender.state = 2,
      temp int t_95 = 2 + Sender.ab,
      K.value = t_95,
      K.state = 1;

  process Sender_K
    guardBlock
      temp bool t_96 = Sender.state == 3,
      temp bool t_97 = Sender.i == 1,
      temp bool t_98 = Sender.i < Sender.n,
      temp bool t_99 = t_97 and t_98,
      temp bool t_100 = t_96 and t_99,
      temp bool t_101 = K.state == 0,
      temp bool t_102 = t_100 and t_101;
    guardCondition t_102;
    effect
      Sender.state = 2,
      temp int t_103 = 4 + Sender.ab,
      K.value = t_103,
      K.state = 1;

  process Sender_K
    guardBlock
      temp bool t_104 = Sender.state == 3,
      temp bool t_105 = Sender.i > 1,
      temp bool t_106 = Sender.i < Sender.n,
      temp bool t_107 = t_105 and t_106,
      temp bool t_108 = t_104 and t_107,
      temp bool t_109 = K.state == 0,
      temp bool t_110 = t_108 and t_109;
    guardCondition t_110;
    effect
      Sender.state = 2,
      K.value = Sender.ab,
      K.state = 1;

  process Sender_Producer
    guardBlock
      temp bool t_111 = Sender.state == 4,
      temp bool t_112 = Sender.i == Sender.n,
      temp bool t_113 = t_111 and t_112,
      temp bool t_114 = Producer.state == 2,
      temp bool t_115 = t_113 and t_114;
    guardCondition t_115;
    effect
      Sender.state = 6,
      Producer.result = 1,
      Producer.state = 3;

  process Sender_Producer
    guardBlock
      temp bool t_116 = Sender.state == 5,
      temp bool t_117 = Sender.i < Sender.n,
      temp bool t_118 = t_116 and t_117,
      temp bool t_119 = Producer.state == 2,
      temp bool t_120 = t_118 and t_119;
    guardCondition t_120;
    effect
      Sender.state = 6,
      Producer.result = 2,
      Producer.state = 3;

  process Sender_Producer
    guardBlock
      temp bool t_121 = Sender.state == 5,
      temp bool t_122 = Sender.i == Sender.n,
      temp bool t_123 = t_121 and t_122,
      temp bool t_124 = Producer.state == 2,
      temp bool t_125 = t_123 and t_124;
    guardCondition t_125;
    effect
      Sender.state = 6,
      Producer.result = 3,
      Producer.state = 3;

  process L_Sender
    guardBlock
      temp bool t_126 = L.state == 1,
      temp bool t_127 = Sender.state == 2,
      temp bool t_128 = t_126 and t_127;
    guardCondition t_128;
    effect
      L.state = 0,
      Sender.state = 4,
      temp int t_129 = 1 - Sender.ab,
      Sender.ab = t_129;

  process Receiver_L
    guardBlock
      temp bool t_130 = Receiver.state == 2,
      temp byte t_131 = Receiver.value & 1,
      temp bool t_132 = Receiver.exp_ab != t_131,
      temp bool t_133 = t_130 and t_132,
      temp bool t_134 = L.state == 0,
      temp bool t_135 = t_133 and t_134;
    guardCondition t_135;
    effect
      Receiver.state = 0,
      L.state = 1;

  process Receiver_L
    guardBlock
      temp bool t_136 = Receiver.state == 3,
      temp bool t_137 = L.state == 0,
      temp bool t_138 = t_136 and t_137;
    guardCondition t_138;
    effect
      Receiver.state = 0,
      temp int t_139 = 1 - Receiver.exp_ab,
      Receiver.exp_ab = t_139,
      L.state = 1;

  process Producer_Sender
    guardBlock
      temp bool t_140 = Producer.state == 1,
      temp bool t_141 = Sender.state == 0,
      temp bool t_142 = t_140 and t_141;
    guardCondition t_142;
    effect
      Producer.state = 2,
      Sender.n = prod_n,
      Sender.state = 1,
      Sender.i = 1;

  process Receiver_Consumer
    guardBlock
      temp bool t_143 = Receiver.state == 2,
      temp byte t_144 = Receiver.value & 1,
      temp bool t_145 = t_144 == Receiver.exp_ab,
      temp byte t_146 = Receiver.value & 2,
      temp bool t_147 = t_146 == 2,
      temp bool t_148 = t_145 and t_147,
      temp bool t_149 = t_143 and t_148,
      temp bool t_150 = Consumer.state == 0,
      temp bool t_151 = t_149 and t_150;
    guardCondition t_151;
    effect
      Receiver.state = 3,
      Consumer.m = 1,
      Consumer.state = 1,
      temp int t_152 = Consumer.n + 1,
      Consumer.n = t_152;

  process Receiver_Consumer
    guardBlock
      temp bool t_153 = Receiver.state == 2,
      temp byte t_154 = Receiver.value & 1,
      temp bool t_155 = t_154 == Receiver.exp_ab,
      temp byte t_156 = Receiver.value & 2,
      temp bool t_157 = t_156 == 0,
      temp bool t_158 = t_155 and t_157,
      temp byte t_159 = Receiver.value & 4,
      temp bool t_160 = t_159 == 0,
      temp bool t_161 = t_158 and t_160,
      temp bool t_162 = t_153 and t_161,
      temp bool t_163 = Consumer.state == 0,
      temp bool t_164 = t_162 and t_163;
    guardCondition t_164;
    effect
      Receiver.state = 3,
      Consumer.m = 5,
      Consumer.state = 1,
      temp int t_165 = Consumer.n + 1,
      Consumer.n = t_165;

  process Receiver_Consumer
    guardBlock
      temp bool t_166 = Receiver.state == 2,
      temp byte t_167 = Receiver.value & 1,
      temp bool t_168 = t_167 == Receiver.exp_ab,
      temp byte t_169 = Receiver.value & 2,
      temp bool t_170 = t_169 == 0,
      temp bool t_171 = t_168 and t_170,
      temp byte t_172 = Receiver.value & 4,
      temp bool t_173 = t_172 == 4,
      temp bool t_174 = t_171 and t_173,
      temp bool t_175 = t_166 and t_174,
      temp bool t_176 = Consumer.state == 0,
      temp bool t_177 = t_175 and t_176;
    guardCondition t_177;
    effect
      Receiver.state = 3,
      Consumer.m = 4,
      Consumer.state = 1,
      temp int t_178 = Consumer.n + 1,
      Consumer.n = t_178;

  process Receiver_Consumer
    guardBlock
      temp bool t_179 = Receiver.state == 0,
      temp bool t_180 = Consumer.state == 0,
      temp bool t_181 = t_179 and t_180;
    guardCondition t_181;
    effect
      Receiver.state = 5,
      Consumer.m = 2,
      Consumer.state = 1,
      temp int t_182 = Consumer.n + 1,
      Consumer.n = t_182;

  process K_Sender
    guardBlock
      temp bool t_183 = K.state == 1,
      temp bool t_184 = Sender.state == 2,
      temp bool t_185 = Sender.counter == 30,
      temp bool t_186 = t_184 and t_185,
      temp bool t_187 = t_183 and t_186;
    guardCondition t_187;
    effect
      K.state = 0,
      Sender.state = 5;

  process K_Sender
    guardBlock
      temp bool t_188 = K.state == 1,
      temp bool t_189 = Sender.state == 2,
      temp bool t_190 = Sender.counter < 30,
      temp bool t_191 = t_189 and t_190,
      temp bool t_192 = t_188 and t_191;
    guardCondition t_192;
    effect
      K.state = 0,
      Sender.state = 3,
      temp int t_193 = Sender.counter + 1,
      Sender.counter = t_193;

  process L_Sender
    guardBlock
      temp bool t_194 = L.state == 1,
      temp bool t_195 = Sender.state == 2,
      temp bool t_196 = Sender.counter == 30,
      temp bool t_197 = t_195 and t_196,
      temp bool t_198 = t_194 and t_197;
    guardCondition t_198;
    effect
      L.state = 0,
      Sender.state = 5;

  process L_Sender
    guardBlock
      temp bool t_199 = L.state == 1,
      temp bool t_200 = Sender.state == 2,
      temp bool t_201 = Sender.counter < 30,
      temp bool t_202 = t_200 and t_201,
      temp bool t_203 = t_199 and t_202;
    guardCondition t_203;
    effect
      L.state = 0,
      Sender.state = 3,
      temp int t_204 = Sender.counter + 1,
      Sender.counter = t_204;
      accepting conditions
      LTL_property.state == 1
      system async property LTL_property;
